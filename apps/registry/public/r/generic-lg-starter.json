{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "generic-lg-starter",
  "type": "registry:block",
  "title": "Generic LG Starter",
  "description": "A starter for CopilotKit with any LangGraph agent.",
  "dependencies": [
    "@copilotkit/react-core",
    "@copilotkit/react-ui"
  ],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/quickstarts/coagents-generic-lg/page.tsx",
      "content": "\"use client\";\n\nimport { CatchAllActionRenderProps, useCoAgent, useCopilotAction, useLangGraphInterrupt } from \"@copilotkit/react-core\";\nimport { CopilotChat, CopilotKitCSSProperties } from \"@copilotkit/react-ui\";\nimport { ToolCall } from \"@/registry/quickstarts/coagents-generic-lg/components/tool-call\";\nimport { AgentState } from \"@/registry/quickstarts/coagents-generic-lg/components/agent-state\";\nimport { Interrupt } from \"@/registry/quickstarts/coagents-generic-lg/components/interrupt\";\nimport { HTMLAttributes } from \"react\";\n\nexport default function Page() {\n  const { state, setState, running } = useCoAgent({\n    name: process.env.NEXT_PUBLIC_COPILOTKIT_AGENT_NAME || \"\",\n  });\n\n  const chatStyles = running ? \"w-2/3 border-r border-slate-200\" : \"w-1/2 h-1/2 mx-auto my-auto\";\n\n  return (\n    <main className=\"flex h-screen bg-gradient-to-r from-indigo-200 to-pink-200\">\n      <Chat\n        className={chatStyles}\n        style={{\n          \"--copilot-kit-primary-color\": \"rgba(99, 102, 241, 0.8)\",\n        } as CopilotKitCSSProperties}\n      />\n\n      {running}\n\n      {running && (\n        <AgentState state={state} setState={setState} className=\"w-1/3 overflow-y-auto\"/>\n      )}\n    </main>\n  );\n}\n\nfunction Chat(props: HTMLAttributes<HTMLDivElement>) {\n  const { running } = useCoAgent({\n    name: process.env.NEXT_PUBLIC_COPILOTKIT_AGENT_NAME || \"\",\n  });\n\n  useLangGraphInterrupt({\n    render: ({ event, result, resolve }) => \n      <Interrupt event={event} result={result} resolve={resolve} />\n  });\n\n  useCopilotAction({\n    name: \"*\",\n    render: ({ name, args, status, result }: CatchAllActionRenderProps) => {      \n      return (\n        <ToolCall name={name} args={args} status={status} result={result} />\n      );\n    },\n  });\n\n  return (\n    <div {...props}>\n      <CopilotChat\n        onThumbsDown={() => { alert(\"Thumbs down\"); }}\n        onThumbsUp={() => { alert(\"Thumbs up\"); }}\n        className={running ? \"h-full py-6\" : \"h-full py-6 rounded-xl\"}\n        labels={{\n          initial: \"Hi! I'm connected to your LangGraph agent. Ask me anything, and I'll show what's happening behind the scenes.\",\n          placeholder: \"Type your message...\",\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/copilotkit/page.tsx"
    },
    {
      "path": "registry/quickstarts/coagents-generic-lg/layout.tsx",
      "content": "import type { Metadata } from \"next\";\n\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport const metadata: Metadata = {\n  title: \"CoAgents Starter\",\n  description: \"CoAgents Starter\",\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <CopilotKit\n      agent={process.env.NEXT_PUBLIC_COPILOTKIT_AGENT_NAME}\n      runtimeUrl={process.env.NEXT_PUBLIC_COPILOTKIT_RUNTIME_URL}\n      publicApiKey={process.env.NEXT_PUBLIC_COPILOT_API_KEY}\n    >\n      {children}\n    </CopilotKit>\n  );\n}",
      "type": "registry:page",
      "target": "app/copilotkit/layout.tsx"
    },
    {
      "path": "registry/quickstarts/coagents-generic-lg/components/agent-state.tsx",
      "content": "import React from 'react';\n\nexport type AgentStateProps = {\n  state: State;\n  setState?: (state: State) => void;\n  className: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type State = any;\n\nexport function AgentState({ state, setState, className}: AgentStateProps) {\n  const { messages, ...rest } = state;\n  const [editableState, setEditableState] = React.useState(JSON.stringify(rest, null, 2));\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [hasChanges, setHasChanges] = React.useState(false);\n  \n  // Update editable state when the actual state changes (if not currently editing)\n  React.useEffect(() => {\n    if (!isEditing) {\n      setEditableState(JSON.stringify(rest, null, 2));\n      setHasChanges(false); \n    }\n  }, [rest, isEditing]);\n\n  const handleEditToggle = () => {\n    setIsEditing(!isEditing);\n    if (isEditing) {\n      // Reset to original state when canceling edit\n      setEditableState(JSON.stringify(rest, null, 2));\n      setHasChanges(false);\n    }\n  };\n\n  const handleStateChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setEditableState(e.target.value);\n    setHasChanges(true);\n  };\n\n  const handleSubmit = () => {\n    try {\n      const newState = JSON.parse(editableState);\n      if (setState) setState({ ...newState, messages });\n      setIsEditing(false);\n      setHasChanges(false);\n    } catch (error) {\n      alert(`Invalid JSON format. Please check your input. \\n\\n${error}`);\n    }\n  };\n\n  const wrapperStyles = `${className} bg-gradient-to-r from-indigo-200 to-pink-200 shadow-inner overflow-auto`;\n  const headerStyles = `sticky top-0 p-4 pt-4 pb-2 bg-indigo-500/50 backdrop-blur-sm shadow-md flex justify-between items-center z-10`;\n  const headerTextStyles = `text-white text-lg font-medium p-4`;\n  const agentNameStyles = `underline`;\n  const buttonStyles = `px-3 py-1 text-sm rounded bg-slate-200 hover:bg-slate-300 transition-colors text-slate-700`;\n  const textareaStyles = `w-full h-[calc(100vh-120px)] font-mono text-sm p-3 bg-white border border-slate-300 bg-opacity-80 backdrop-blur-sm rounded resize-none focus:ring-1 focus:ring-purple-500 focus:border-purple-500 outline-none`;\n  const preStyles = `font-mono text-slate-700 h-[calc(100vh-120px)] whitespace-pre-wrap break-words text-sm w-full overflow-x-hidden p-3 bg-white border border-slate-200 rounded`;\n  \n  return (\n    <div className={wrapperStyles}>\n      <div className={headerStyles}>\n        <h2 className={headerTextStyles}>\n          <span className={agentNameStyles}>{process.env.NEXT_PUBLIC_AGENT_NAME}</span> state\n        </h2>\n        <div className=\"flex gap-2\">\n          {hasChanges && (\n            <button\n              onClick={handleSubmit}\n              className={buttonStyles}\n            >\n              Save\n            </button>\n          )}\n          <button \n            onClick={handleEditToggle}\n            className={buttonStyles}\n          >\n            {isEditing ? \"Cancel\" : \"Edit\"}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"p-4\">\n        {isEditing ? (\n          <div className=\"space-y-3\">\n            <textarea\n              value={editableState}\n              onChange={handleStateChange}\n              className={textareaStyles}\n              spellCheck=\"false\"\n            />\n          </div>\n        ) : (\n          <pre className={preStyles}>\n            {editableState}\n          </pre>\n        )}\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component",
      "target": "components/agent-state.tsx"
    },
    {
      "path": "registry/quickstarts/coagents-generic-lg/components/tool-call.tsx",
      "content": "import {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { CatchAllActionRenderProps } from \"@copilotkit/react-core\";\n\nexport function ToolCall(toolCallProps: CatchAllActionRenderProps) {\n  const triggerStyles = \"inline-flex rounded-xl items-center gap-2 p-2 rounded bg-indigo-500/60 text-white cursor-pointer m-1\";\n  const contentStyles = \"bg-white rounded-xl min-w-[300px] max-w-[500px] p-4 border\";\n  const statusStyles = \"text-xs px-2 py-0.5 rounded-full bg-pink-200/40 text-white\";\n\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className={triggerStyles}>\n            <span className=\"pr-2\">ðŸ”§</span>  {toolCallProps.name}\n            <span className={statusStyles}>{toolCallProps.status}</span>\n          </div>\n        </TooltipTrigger>\n        <TooltipContent\n          side=\"right\" \n          align=\"center\" \n          className={contentStyles}\n        >\n          <ToolCallInformation {...toolCallProps} />\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\nconst ToolCallInformation = (toolCallProps: CatchAllActionRenderProps) => {\n  const { name, args, status, result } = toolCallProps;\n\n  const wrapperStyles = \"flex flex-col gap-2 max-h-[400px] overflow-y-auto text-black\";\n  const titleStyles = \"flex flex-col gap-1\";\n  const contentStyles = \"flex flex-col gap-1\";\n  const preStyles = \"bg-indigo-500/10 p-2 rounded text-sm overflow-auto max-h-[200px] m-0 whitespace-pre-wrap break-words\";\n\n  return (\n    <div className={wrapperStyles}>\n      <div className={titleStyles}>\n        <strong>Name:</strong> {name}\n      </div>\n      <div className={contentStyles}>\n        <strong>Arguments:</strong> \n        <pre className={preStyles}>\n          {JSON.stringify(args, null, 2)}\n        </pre>\n      </div>\n      <div className={contentStyles}>\n        <strong>Status:</strong> {status}\n      </div>\n      <div className={contentStyles}>\n        <strong>Result:</strong> \n        <pre className={preStyles}>\n          {JSON.stringify(result, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component",
      "target": "components/tool-call.tsx"
    },
    {
      "path": "registry/quickstarts/coagents-generic-lg/components/interrupt.tsx",
      "content": "import { LangGraphInterruptEvent } from \"@copilotkit/runtime-client-gql\";\nimport { useState } from \"react\";\n\nexport interface InterruptProps {\n    event: LangGraphInterruptEvent;\n    result: unknown;\n    resolve: (resolution: string) => void;\n}\n\nexport function Interrupt({ event, resolve }: InterruptProps) {\n  const [response, setResponse] = useState(\"\");\n\n  const wrapperStyles = \"flex flex-col justify-center items-center h-full w-full bg-indigo-600/50 my-4 rounded-xl\";\n  const titleStyles = \"text-lg font-semibold text-white\";\n  const subtitleStyles = \"text-sm font-normal text-gray-200 mb-1\";\n  const contentStyles = \"flex flex-col gap-2 p-4 w-full\";\n  const textareaStyles = \"w-full p-2 rounded-xl focus:outline-purple-500 border shadow-inner min-h-[100px] bg-white\";\n  const buttonStyles = \"px-4 py-2 bg-black text-white rounded-xl hover:bg-gray-700 transition-colors\";\n  const eventStyles = \"h-[300px] w-full overflow-auto p-3\";\n  const preStyles = \"whitespace-pre-wrap break-words text-sm m-0 w-full\";\n\n  return (\n    <div className={wrapperStyles}>\n      <div className={contentStyles}>\n        <h3 className={titleStyles}>\n          ðŸ™‹ {event.name} <span className={subtitleStyles}>({event.type})</span>\n        </h3>\n        \n        <p className=\"text-white\">The agent wants you to see...</p>\n        <div className=\"bg-white rounded-xl border shadow-inner w-full\">\n          <div className={eventStyles}>\n            <pre className={preStyles}>{JSON.stringify(event.value, null, 2)}</pre>\n          </div>\n        </div>\n\n        <p className=\"mt-6 text-white\">How do you want to respond?</p>\n        <textarea \n          className={textareaStyles} \n          placeholder=\"Enter your response\"\n          value={response}\n          onChange={(e) => setResponse(e.target.value)}\n        />\n        \n        <div className=\"flex justify-center mt-4\">\n          <button \n            onClick={() => resolve(event.value)}\n            className={buttonStyles}\n          >\n            Respond\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/interrupt.tsx"
    }
  ]
}