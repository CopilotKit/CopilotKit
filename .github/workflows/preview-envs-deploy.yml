name: Deploy Preview Environments

on:
  pull_request:
    branches:
      - main
      - pre/*
  push:
    branches:
      - main

concurrency:
  group: preview-${{ github.ref }}-deploy
  cancel-in-progress: false

jobs:
  build_images:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'automated-version-pr') }}
    runs-on: ubuntu-latest
    name: Build Images
    strategy:
      matrix:
        app:
          - {
              project: "coagents-research-canvas",
              type: "agent",
              runtime: "python",
              deps: "local-deps",
            }
          - {
              project: "coagents-research-canvas",
              type: "agent",
              runtime: "js",
              deps: "remote-deps",
            }
          - { project: "coagents-research-canvas", type: "ui" }
          - { project: "coagents-routing", type: "agent", runtime: "python", deps: "local-deps" }
          - { project: "coagents-routing", type: "agent", runtime: "js", deps: "remote-deps" }
          - { project: "coagents-routing", type: "ui" }
          - { project: "coagents-qa-text", type: "agent", runtime: "python", deps: "local-deps" }
          - { project: "coagents-qa-text", type: "agent", runtime: "js", deps: "remote-deps" }
          - { project: "coagents-qa-text", type: "ui" }
          - { project: "coagents-qa-native", type: "agent", runtime: "python", deps: "local-deps" }
          - { project: "coagents-qa-native", type: "agent", runtime: "js", deps: "remote-deps" }
          - { project: "coagents-qa-native", type: "ui" }
          - { project: "next-openai", type: "next-openai" }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure AWS Profile
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile default
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile default
          aws configure set region us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: AWS ECR Login
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 058264219587.dkr.ecr.us-east-1.amazonaws.com

      - name: (UI) Setup pnpm
        if: matrix.app.type == 'ui' || matrix.app.type == 'next-openai'
        uses: pnpm/action-setup@v4
        with:
          version: "9.5"

      - name: (UI) Use Node.js 21
        if: matrix.app.type == 'ui' || matrix.app.type == 'next-openai'
        uses: actions/setup-node@v2
        with:
          node-version: 21.x
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: (UI) Install app dependencies
        if: matrix.app.type == 'ui'
        working-directory: examples/${{ matrix.app.project }}/${{ matrix.app.type }}
        run: pnpm install --frozen-lockfile

      - name: (UI, Local Deps) Install monorepo
        if: matrix.app.type == 'ui' || matrix.app.type == 'next-openai'
        working-directory: ./CopilotKit
        run: pnpm install --frozen-lockfile

      - name: (UI, Local Deps) Build @copilotkit packages
        if: matrix.app.type == 'ui' || matrix.app.type == 'next-openai'
        working-directory: ./CopilotKit
        run: pnpx turbo run build

      - name: (UI, Local Deps) Link @copilotkit packages
        if: matrix.app.type == 'ui'
        working-directory: ./examples/${{ matrix.app.project }}/${{ matrix.app.type }}
        run: |
          for package in $(ls -d ../../../CopilotKit/packages/*); do
            pnpm link $package
          done

      - name: (UI) Build app
        if: matrix.app.type == 'ui'
        working-directory: examples/${{ matrix.app.project }}/${{ matrix.app.type }}
        run: pnpm run build
        env:
          OPENAI_API_KEY: placeholder

      - name: (next-openai) Build app
        if: matrix.app.type == 'next-openai'
        working-directory: CopilotKit/examples/next-openai
        run: pnpm run example-build
        env:
          OPENAI_API_KEY: placeholder

      - name: (UI) Build Image
        if: matrix.app.type == 'ui'
        run: |
          docker buildx build \
            -t 058264219587.dkr.ecr.us-east-1.amazonaws.com/coagents:${{ matrix.app.project }}-ui-${{ github.run_id }} \
            --build-arg APP_DIR=examples/${{ matrix.app.project }}/${{ matrix.app.type }} \
            -f ./examples/Dockerfile.${{ matrix.app.type }} \
            --platform=linux/amd64 \
            --provenance=false \
            --push \
            .
        env:
          DOCKER_BUILDKIT: 1

      - name: (next-openai) Build Image
        if: matrix.app.type == 'next-openai'
        run: |
          docker buildx build \
            -t 058264219587.dkr.ecr.us-east-1.amazonaws.com/coagents:next-openai-${{ github.run_id }} \
            -f ./CopilotKit/examples/next-openai/Dockerfile \
            --platform=linux/amd64 \
            --provenance=false \
            --push \
            .
        env:
          DOCKER_BUILDKIT: 1

      - name: (Agent) Build Image - Python Agent
        if: matrix.app.type == 'agent' && matrix.app.runtime == 'python'
        run: |
          docker buildx build \
            -t 058264219587.dkr.ecr.us-east-1.amazonaws.com/coagents:${{ matrix.app.project }}-agent-python-${{ matrix.app.deps }}-${{ github.run_id }} \
            --build-arg APP_DIR=examples/${{ matrix.app.project }}/agent \
            -f ./examples/Dockerfile.agent-python \
            --build-arg WITH_LOCAL_DEPS=${{ matrix.app.deps == 'local-deps' }} \
            --platform=linux/amd64 \
            --provenance=false \
            --push \
            .
        env:
          DOCKER_BUILDKIT: 1

      - name: (Agent) Build Image - JS Agent
        if: matrix.app.type == 'agent' && matrix.app.runtime == 'js'
        run: |
          docker buildx build \
            -t 058264219587.dkr.ecr.us-east-1.amazonaws.com/coagents:${{ matrix.app.project }}-agent-js-${{ matrix.app.deps }}-${{ github.run_id }} \
            --build-arg APP_DIR=examples/${{ matrix.app.project }}/agent-js \
            -f ./examples/Dockerfile.agent-js \
            --platform=linux/amd64 \
            --provenance=false \
            --push \
            .
        env:
          DOCKER_BUILDKIT: 1

  deploy:
    name: Deploy Preview Environments
    runs-on: ubuntu-20.04
    needs: build_images
    outputs:
      e2e-urls: ${{ steps.export-e2e-urls.outputs.e2e-urls }}
    defaults:
      run:
        working-directory: examples/helmfile
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v1.2.0

      - name: EKS Config
        run: |
          aws eks --region us-east-1 update-kubeconfig --name copilotcloud-staging-eks

      - name: Set Environment Name
        id: set-environment-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment=pr-${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=main" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare Environment Config
        run: |
          cat > ./override-values.yaml << 'EOL'
          environment: ${{ steps.set-environment-name.outputs.environment }}
          namespace: copilotkit-examples-${{ steps.set-environment-name.outputs.environment }}
          globalImageTag: ${{ github.run_id }}
          EOL

      - name: Helmfile Sync
        run: |
          helmfile --state-values-file=./override-values.yaml sync
          helmfile --state-values-file=./override-values.yaml --selector "name!=examples-shared" list --output json > helmfile-output.json

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "9.5"

      - name: Use Node.js 21
        uses: actions/setup-node@v2
        with:
          node-version: 21.x
          cache: "pnpm"
          cache-dependency-path: "./examples/helmfile/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate table from outputs
        id: generate-table
        run: |
          node generate-table
        env:
          ENVIRONMENT: ${{ steps.set-environment-name.outputs.environment }}
          NAMESPACE: copilotkit-examples-${{ steps.set-environment-name.outputs.environment }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Delete a comment
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: preview-status-update
          mode: delete

      - name: Comment post-deployment
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: preview-status-update
          file-path: ./examples/helmfile/preview-comment.md

      - name: Export Variable - E2E URLs
        id: export-e2e-urls
        working-directory: examples/e2e
        run: |
          echo "e2e-urls=$(cat test-config.json | base64 -w 0)" >> "$GITHUB_OUTPUT"

  test:
    if: github.event_name == 'pull_request'
    name: End to End Tests
    uses: ./.github/workflows/e2e.yml
    needs: deploy
    with:
      ref: "${{ github.event.pull_request.head.ref }}"
      sha: "${{ github.event.pull_request.head.sha }}"
      urls: "${{ needs.deploy.outputs.e2e-urls }}"
      pr_number: "${{ github.event.pull_request.number }}"
