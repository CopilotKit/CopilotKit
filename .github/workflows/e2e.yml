name: End to End Tests

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "sha"
        required: true
      ref:
        description: "ref"
        required: true
      urls:
        description: "urls"
        required: true
      pr_number:
        description: "Pull Request number"
        required: true
jobs:
  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - name: Create Status Check
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'E2E Tests',
              head_sha: '${{ inputs.sha }}',
              status: 'in_progress',
              started_at: new Date().toISOString()
            })

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Save E2E URLs
        working-directory: examples/e2e
        run: |
          echo "${{ inputs.urls }}" | base64 -d > app-configs.json

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Dependencies
        working-directory: ./examples/e2e
        run: |
          pnpm install
          pnpm exec playwright install --with-deps

      - name: Print app configs
        working-directory: examples/e2e
        run: |
          cat app-configs.json

      - name: Run Tests
        id: run_tests
        working-directory: ./examples/e2e
        continue-on-error: true
        run: |
          pnpm playwright test
        env:
          GITHUB_SHA: ${{ github.sha }}
          COPILOT_CLOUD_PROD_RUNTIME_URL: "https://api.cloud.copilotkit.ai/copilotkit/v1"
          COPILOT_CLOUD_PROD_PUBLIC_API_KEY: ${{ secrets.COPILOT_CLOUD_PROD_PUBLIC_API_KEY }}
          COPILOT_CLOUD_STAGING_RUNTIME_URL: "https://api.cloud.stagingcopilotkit.ai/copilotkit/v1"
          COPILOT_CLOUD_STAGING_PUBLIC_API_KEY: ${{ secrets.COPILOT_CLOUD_STAGING_PUBLIC_API_KEY }}

      - name: Delete a comment
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ inputs.pr_number }}
          comment-tag: test-run-status-update
          mode: delete

      - name: Comment post-deployment
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ inputs.pr_number }}
          comment-tag: test-run-status-update
          file-path: ./examples/e2e/test-results/test-run-comment.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            examples/e2e/playwright-report/
            examples/e2e/test-results/
          retention-days: 30

      - name: Update Status Check
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let summary = 'Test run completed.';
            let conclusion = 'success';

            try {
            const results = JSON.parse(
              fs.readFileSync('./examples/e2e/test-results/test-results.json', 'utf8')
            );

            const stats = results.stats;
            if (stats.failures > 0) {
              conclusion = 'failure';
              const failedTests = results.suites
                .flatMap(suite => suite.specs)
                .filter(spec => spec.tests.some(test => test.status === 'failed'));
              
              summary = [
                `Tests: ${stats.total}, Failed: ${stats.failures}, Duration: ${Math.round(stats.duration / 1000)}s`,
                '',
                'Failed Tests:',
                ...failedTests.map(test => `- ${test.title}`),
                '',
                'See PR comment for full details.'
              ].join('\n');
            } else {
              summary = `All ${stats.total} tests passed in ${Math.round(stats.duration / 1000)}s`;
            }
            } catch (error) {
              conclusion = 'failure';
              summary = 'Failed to read test results.';
              console.error('Error reading test results:', error);
            }

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'E2E Tests',
              head_sha: '${{ inputs.sha }}',
              status: 'completed',
              conclusion: conclusion,
              completed_at: new Date().toISOString(),
            output: {
              title: conclusion === 'success' ? 'E2E Tests Passed' : 'E2E Tests Failed',
                summary: summary
              }
            });
