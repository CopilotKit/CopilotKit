{
  "agentic_chat": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA simple agentic chat flow.\n\"\"\"\n\nfrom crewai.flow.flow import Flow, start\nfrom litellm import completion\nfrom copilotkit.crewai import copilotkit_stream, CopilotKitState\n\nclass AgenticChatFlow(Flow[CopilotKitState]):\n\n    @start()\n    async def chat(self):\n        system_prompt = \"You are a helpful assistant.\"\n\n        # 1. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 1.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 1.2 Bind the available tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                ],\n\n                # 1.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 2. Append the message to the messages in state\n        self.state.messages.append(message)\n\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticChat: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"agentic_chat\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  const [background, setBackground] = useState<string>(\"#fefefe\");\n\n  useCopilotAction({\n    name: \"change_background\",\n    description:\n      \"Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.\",\n    parameters: [\n      {\n        name: \"background\",\n        type: \"string\",\n        description: \"The background. Prefer gradients.\",\n      },\n    ],\n    handler: ({ background }) => {\n      console.log(\"background\", background);\n      setBackground(background);\n    },\n  });\n\n  return (\n    <div\n      className=\"flex justify-center items-center h-full w-full\"\n      style={{ background }}\n    >\n      <div className=\"w-8/10 h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. Want to chat?\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AgenticChat;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🤖 Agentic Chat with Frontend Tools\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic chat** capabilities with **frontend tool integration**:\n1. **Natural Conversation**: Chat with your Copilot in a familiar chat interface\n2. **Frontend Tool Execution**: The Copilot can directly interacts with your UI by calling frontend functions\n3. **Seamless Integration**: Tools defined in the frontend and automatically discovered and made available to the agent\n\n## How to Interact\n\nTry asking your Copilot to:\n- \"Can you change the background color to something more vibrant?\"\n- \"Make the background a blue to purple gradient\"\n- \"Set the background to a sunset-themed gradient\"\n- \"Change it back to a simple light color\"\n\nYou can also chat about other topics - the agent will respond conversationally while having the ability to use your UI tools when appropriate.\n\n## ✨ Frontend Tool Integration in Action\n\n**What's happening technically:**\n- The React component defines a frontend function using `useCopilotAction`\n- CopilotKit automatically exposes this function to the agent\n- When you make a request, the agent determines whether to use the tool\n- The agent calls the function with the appropriate parameters\n- The UI immediately updates in response\n\n**What you'll see in this demo:**\n- The Copilot understands requests to change the background\n- It generates CSS values for colors and gradients\n- When it calls the tool, the background changes instantly\n- The agent provides a conversational response about the changes it made\n\nThis technique of exposing frontend functions to your Copilot can be extended to any UI manipulation you want to enable, from theme changes to data filtering, navigation, or complex UI state management! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "agentic_generative_ui": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating agentic generative UI.\n\"\"\"\n\nimport json\nimport asyncio\nfrom crewai.flow.flow import Flow, start, router, listen, or_\nfrom copilotkit.crewai import (\n  copilotkit_stream,\n  CopilotKitState,\n  copilotkit_predict_state,\n  copilotkit_emit_state\n)\nfrom litellm import completion\nfrom pydantic import BaseModel\nfrom typing import Literal, List\n\n# This tool simulates performing a task on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nPERFORM_TASK_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_task_steps\",\n        \"description\": \"Make up 10 steps (only a couple of words per step) that are required for a task. The step should be in gerund form (i.e. Digging hole, opening door, ...)\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\n                                \"type\": \"string\",\n                                \"description\": \"The text of the step in gerund form\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"pending\"],\n                                \"description\": \"The status of the step, always 'pending'\"\n                            }\n                        },\n                        \"required\": [\"description\", \"status\"]\n                    },\n                    \"description\": \"An array of 10 step objects, each containing text and status\"\n                }\n            },\n            \"required\": [\"steps\"]\n        }\n    }\n}\n\nclass TaskStep(BaseModel):\n    description: str\n    status: Literal[\"pending\", \"completed\"]\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    Here we define the state of the agent\n\n    In this instance, we're inheriting from CopilotKitState, which will bring in\n    the CopilotKitState fields. We're also adding a custom field, `steps`,\n    which will be used to store the steps of the task.\n    \"\"\"\n    steps: List[TaskStep] = []\n\n\nclass AgenticGenerativeUIFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that uses the CopilotKit framework to create a chat agent.\n    \"\"\"\n\n    \n    @start()\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n        self.state.steps = []\n\n    @router(or_(start_flow, \"simulate_task\"))\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n        system_prompt = \"\"\"\n        You are a helpful assistant assisting with any task. \n        When asked to do something, you MUST call the function `generate_task_steps`\n        that was provided to you.\n        If you called the function, you MUST NOT repeat the steps in your next response to the user.\n        Just give a very brief summary (one sentence) of what you did with some emojis. \n        Always say you actually did the steps, not merely generated them.\n        \"\"\"\n\n        # 1. Here we specify that we want to stream the tool call to generate_task_steps\n        #    to the frontend as state.\n        await copilotkit_predict_state({\n            \"steps\": {\n                \"tool\": \"generate_task_steps\",\n                \"tool_argument\": \"steps\"\n            }\n        })\n\n        # 2. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 2.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 2.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    PERFORM_TASK_TOOL\n                ],\n\n                # 2.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 3. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        # 4. Handle tool call\n        if message.get(\"tool_calls\"):\n            tool_call = message[\"tool_calls\"][0]\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"function\"][\"name\"]\n            tool_call_args = json.loads(tool_call[\"function\"][\"arguments\"])\n\n            if tool_call_name == \"generate_task_steps\":\n                # Convert each step in the JSON array to a TaskStep instance\n                self.state.steps = [TaskStep(**step) for step in tool_call_args[\"steps\"]]\n\n                # 4.1 Append the result to the messages in state\n                self.state.messages.append({\n                    \"role\": \"tool\",\n                    \"content\": \"Steps executed.\",\n                    \"tool_call_id\": tool_call_id\n                })\n                return \"route_simulate_task\"\n\n        # 5. If our tool was not called, return to the end route\n        return \"route_end\"\n\n    @listen(\"route_simulate_task\")\n    async def simulate_task(self):\n        \"\"\"\n        Simulate the task.\n        \"\"\"\n        for step in self.state.steps:\n            # simulate executing the step\n            await asyncio.sleep(1)\n            step.status = \"completed\"\n            await copilotkit_emit_state(self.state)\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticGenerativeUI: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"agentic_generative_ui\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\ninterface AgentState {\n  steps: {\n    description: string;\n    status: \"pending\" | \"completed\";\n  }[];\n}\n\nconst Chat = () => {\n  useCoAgentStateRender<AgentState>({\n    name: \"agentic_generative_ui\",\n    render: ({ state }) => {\n      if (!state.steps || state.steps.length === 0) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex\">\n          <div className=\"bg-gray-100 rounded-lg w-[500px] p-4 text-black space-y-2\">\n            {state.steps.map((step, index) => {\n              if (step.status === \"completed\") {\n                return (\n                  <div key={index} className=\"text-sm\">\n                    ✓ {step.description}\n                  </div>\n                );\n              } else if (\n                step.status === \"pending\" &&\n                index === state.steps.findIndex((s) => s.status === \"pending\")\n              ) {\n                return (\n                  <div\n                    key={index}\n                    className=\"text-3xl font-bold text-slate-700\"\n                  >\n                    <Spinner />\n                    {step.description}\n                  </div>\n                );\n              } else {\n                return (\n                  <div key={index} className=\"text-sm\">\n                    <Spinner />\n                    {step.description}\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-screen w-screen\">\n      <div className=\"w-8/10 h-8/10\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. I can do anything, just ask!\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default AgenticGenerativeUI;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🚀 Agentic Generative UI Task Executor\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic generative UI** capabilities:\n1. **Real-time Status Updates**: The Copilot provides live feedback as it works through complex tasks\n2. **Long-running Task Execution**: See how agents can handle extended processes with continuous feedback\n3. **Dynamic UI Generation**: The interface updates in real-time to reflect the agent's progress\n\n## How to Interact\n\nSimply ask your Copilot to perform any moderately complex task:\n- \"Make me a sandwich\"\n- \"Plan a vacation to Japan\"\n- \"Create a weekly workout routine\"\n\nThe Copilot will break down the task into steps and begin \"executing\" them, providing real-time status updates as it progresses.\n\n## ✨ Agentic Generative UI in Action\n\n**What's happening technically:**\n- The agent analyzes your request and creates a detailed execution plan\n- Each step is processed sequentially with realistic timing\n- Status updates are streamed to the frontend using CopilotKit's streaming capabilities\n- The UI dynamically renders these updates without page refreshes\n- The entire flow is managed by the agent, requiring no manual intervention\n\n**What you'll see in this demo:**\n- The Copilot breaks your task into logical steps\n- A status indicator shows the current progress\n- Each step is highlighted as it's being executed\n- Detailed status messages explain what's happening at each moment\n- Upon completion, you receive a summary of the task execution\n\nThis pattern of providing real-time progress for long-running tasks is perfect for scenarios where users benefit from transparency into complex processes - from data analysis to content creation, system configurations, or multi-stage workflows! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "human_in_the_loop": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating agentic generative UI.\n\"\"\"\n\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  CopilotKitState, \n)\nfrom litellm import completion\nfrom pydantic import BaseModel\nfrom typing import Literal, List\n\n# This tool simulates performing a task on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nDEFINE_TASK_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_task_steps\",\n        \"description\": \"Make up 10 steps (only a couple of words per step) that are required for a task. The step should be in imperative form (i.e. Dig hole, Open door, ...)\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\n                                \"type\": \"string\",\n                                \"description\": \"The text of the step in imperative form\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"enabled\"],\n                                \"description\": \"The status of the step, always 'enabled'\"\n                            }\n                        },\n                        \"required\": [\"description\", \"status\"]\n                    },\n                    \"description\": \"An array of 10 step objects, each containing text and status\"\n                }\n            },\n            \"required\": [\"steps\"]\n        }\n    }\n}\n\nclass TaskStep(BaseModel):\n    description: str\n    status: Literal[\"enabled\", \"disabled\"]\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    Here we define the state of the agent\n\n    In this instance, we're inheriting from CopilotKitState, which will bring in\n    the CopilotKitState fields. We're also adding a custom field, `steps`,\n    which will be used to store the steps of the task.\n    \"\"\"\n    steps: List[TaskStep] = []\n\n\nclass HumanInTheLoopFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that uses the CopilotKit framework to create a chat agent.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n        system_prompt = \"\"\"\n        You are a helpful assistant that can perform any task.\n        You MUST call the `generate_task_steps` function when the user asks you to perform a task.\n        When the function `generate_task_steps` is called, the user will decide to enable or disable a step.\n        After the user has decided which steps to perform, provide a textual description of how you are performing the task.\n        If the user has disabled a step, you are not allowed to perform that step.\n        However, you should find a creative workaround to perform the task, and if an essential step is disabled, you can even use\n        some humor in the description of how you are performing the task.\n        Don't just repeat a list of steps, come up with a creative but short description (3 sentences max) of how you are performing the task.\n        \"\"\"\n\n        # 1. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 1.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 1.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    DEFINE_TASK_TOOL\n                ],\n\n                # 1.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 2. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        return \"route_end\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst HumanInTheLoop: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"human_in_the_loop\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  useCopilotAction({\n    name: \"generate_task_steps\",\n    parameters: [\n      {\n        name: \"steps\",\n        type: \"object[]\",\n        attributes: [\n          {\n            name: \"description\",\n            type: \"string\",\n          },\n          {\n            name: \"status\",\n            type: \"string\",\n            enum: [\"enabled\", \"disabled\", \"executing\"],\n          },\n        ],\n      },\n    ],\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      const [localSteps, setLocalSteps] = useState<\n        {\n          description: string;\n          status: \"disabled\" | \"enabled\" | \"executing\";\n        }[]\n      >([]);\n\n      useEffect(() => {\n        if (status === \"executing\" && localSteps.length === 0) {\n          setLocalSteps(args.steps);\n        }\n      }, [status, JSON.stringify(args.steps)]);\n\n      if (args.steps === undefined || args.steps.length === 0) {\n        return <></>;\n      }\n\n      const steps = localSteps.length > 0 ? localSteps : args.steps;\n\n      const handleCheckboxChange = (index: number) => {\n        setLocalSteps((prevSteps) =>\n          prevSteps.map((step, i) =>\n            i === index\n              ? {\n                  ...step,\n                  status: step.status === \"enabled\" ? \"disabled\" : \"enabled\",\n                }\n              : step\n          )\n        );\n      };\n\n      console.log(steps);\n\n      return (\n        <div className=\"flex flex-col gap-4 w-[500px] bg-gray-100 rounded-lg p-8 mb-4\">\n          <div className=\" text-black space-y-2\">\n            <h2 className=\"text-lg font-bold mb-4\">Select Steps</h2>\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-sm flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={step.status === \"enabled\"}\n                  onChange={() => handleCheckboxChange(index)}\n                  className=\"mr-2\"\n                />\n                <span\n                  className={\n                    step.status !== \"enabled\" && status != \"inProgress\"\n                      ? \"line-through\"\n                      : \"\"\n                  }\n                >\n                  {step.description}\n                </span>\n              </div>\n            ))}\n            {status === \"executing\" && (\n              <button\n                className=\"mt-4 bg-gradient-to-r from-purple-400 to-purple-600 text-white py-2 px-4 rounded cursor-pointer w-48 font-bold\"\n                onClick={() => {\n                  const selectedSteps = localSteps\n                    .filter((step) => step.status === \"enabled\")\n                    .map((step) => step.description);\n                  respond(\n                    \"The user selected the following steps: \" +\n                      selectedSteps.join(\", \")\n                  );\n                }}\n              >\n                ✨ Perform Steps\n              </button>\n            )}\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-screen w-screen\">\n      <div className=\"w-8/10 h-8/10\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. I can do anything, just ask!\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default HumanInTheLoop;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🤝 Human-in-the-Loop Task Planner\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **human-in-the-loop** capabilities:\n1. **Collaborative Planning**: The Copilot generates task steps and lets you decide which ones to perform\n2. **Interactive Decision Making**: Select or deselect steps to customize the execution plan\n3. **Adaptive Responses**: The Copilot adapts its execution based on your choices, even handling missing steps\n\n## How to Interact\n\nTry these steps to experience the demo:\n1. Ask your Copilot to help with a task, such as:\n   - \"Make me a sandwich\"\n   - \"Plan a weekend trip\"\n   - \"Organize a birthday party\"\n   - \"Start a garden\"\n\n2. Review the suggested steps provided by your Copilot\n\n3. Select or deselect steps using the checkboxes to customize the plan\n   - Try removing essential steps to see how the Copilot adapts!\n\n4. Click \"Execute Plan\" to see the outcome based on your selections\n\n## ✨ Human-in-the-Loop Magic in Action\n\n**What's happening technically:**\n- The agent analyzes your request and breaks it down into logical steps\n- These steps are presented to you through a dynamic UI component\n- Your selections are captured as user input\n- The agent considers your choices when executing the plan\n- The agent adapts to missing steps with creative problem-solving\n\n**What you'll see in this demo:**\n- The Copilot provides a detailed, step-by-step plan for your task\n- You have complete control over which steps to include\n- If you remove essential steps, the Copilot provides entertaining and creative workarounds\n- The final execution reflects your choices, showing how human input shapes the outcome\n- Each response is tailored to your specific selections\n\nThis human-in-the-loop pattern creates a powerful collaborative experience where both human judgment and AI capabilities work together to achieve better results than either could alone! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "shared_state": {
    "files": [
      {
        "name": "README.md",
        "content": "# 🍳 Shared State Recipe Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **shared state** functionality - a powerful feature that enables bidirectional data flow between:\n1. **Frontend → Agent**: UI controls update the agent's context in real-time\n2. **Agent → Frontend**: The Copilot's recipe creations instantly update the UI components\n\nIt's like having a cooking buddy who not only listens to what you want but also updates your recipe card as you chat - no refresh needed! ✨\n\n## How to Interact\n\nMix and match any of these parameters (or none at all - it's up to you!):\n- **Skill Level**: Beginner to expert 👨‍🍳\n- **Cooking Time**: Quick meals or slow cooking ⏱️\n- **Special Preferences**: Dietary needs, flavor profiles, health goals 🥗\n- **Ingredients**: Items you want to include 🧅🥩🍄\n- **Instructions**: Any specific steps\n\nThen chat with your Copilot chef with prompts like:\n- \"I'm a beginner cook. Can you make me a quick dinner?\"\n- \"I need something spicy with chicken that takes under 30 minutes!\"\n\n## ✨ Shared State Magic in Action\n\n**What's happening technically:**\n- The UI and Copilot agent share the same state object (**Agent State = UI State**)\n- Changes from either side automatically update the other\n- Neither side needs to manually request updates from the other\n\n**What you'll see in this demo:**\n- Set cooking time to 20 minutes in the UI and watch the Copilot immediately respect your time constraint\n- Add ingredients through the UI and see them appear in your recipe\n- When the Copilot suggests new ingredients, watch them automatically appear in the UI ingredients list\n- Change your skill level and see how the Copilot adapts its instructions in real-time\n\nThis synchronized state creates a seamless experience where the agent always has your current preferences, and any updates to the recipe are instantly reflected in both places.\n\nThis shared state pattern can be applied to any application where you want your UI and Copilot to work together in perfect harmony!\n",
        "path": "README.md",
        "language": "markdown"
      },
      {
        "name": "agent.py",
        "content": "\"\"\"\nA demo of shared state between the agent and CopilotKit.\n\"\"\"\n\nimport json\nfrom enum import Enum\nfrom typing import List, Optional\nfrom litellm import completion\nfrom pydantic import BaseModel\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  copilotkit_predict_state,\n  CopilotKitState\n)\n\nclass SkillLevel(str, Enum):\n    \"\"\"\n    The level of skill required for the recipe.\n    \"\"\"\n    BEGINNER = \"Beginner\"\n    INTERMEDIATE = \"Intermediate\"\n    ADVANCED = \"Advanced\"\n\nclass SpecialPreferences(str, Enum):\n    \"\"\"\n    Special preferences for the recipe.\n    \"\"\"\n    HIGH_PROTEIN = \"High Protein\"\n    LOW_CARB = \"Low Carb\"\n    SPICY = \"Spicy\"\n    BUDGET_FRIENDLY = \"Budget-Friendly\"\n    ONE_POT_MEAL = \"One-Pot Meal\"\n    VEGETARIAN = \"Vegetarian\"\n    VEGAN = \"Vegan\"\n\nclass CookingTime(str, Enum):\n    \"\"\"\n    The cooking time of the recipe.\n    \"\"\"\n    FIVE_MIN = \"5 min\"\n    FIFTEEN_MIN = \"15 min\"\n    THIRTY_MIN = \"30 min\"\n    FORTY_FIVE_MIN = \"45 min\"\n    SIXTY_PLUS_MIN = \"60+ min\"\n\n\nGENERATE_RECIPE_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_recipe\",\n        \"description\": \" \".join(\"\"\"Generate or modify an existing recipe. \n        When creating a new recipe, specify all fields. \n        When modifying, only fill optional fields if they need changes; \n        otherwise, leave them empty.\"\"\".split()),\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"recipe\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"skill_level\": {\n                            \"type\": \"string\",\n                            \"enum\": [level.value for level in SkillLevel],\n                            \"description\": \"The skill level required for the recipe\"\n                        },\n                        \"special_preferences\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [preference.value for preference in SpecialPreferences]\n                            },\n                            \"description\": \"A list of special preferences for the recipe\"\n                        },\n                        \"cooking_time\": {\n                            \"type\": \"string\",\n                            \"enum\": [time.value for time in CookingTime],\n                            \"description\": \"The cooking time of the recipe\"\n                        },\n                        \"ingredients\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of ingredients in the recipe\"\n                        },\n                        \"instructions\": {\n                            \"type\": \"string\",\n                            \"description\": \"Instructions for the recipe\"\n                        }\n                    },\n                }\n            },\n            \"required\": [\"recipe\"]\n        }\n    }\n}\n\nclass Recipe(BaseModel):\n    \"\"\"\n    A recipe.\n    \"\"\"\n    skill_level: SkillLevel\n    special_preferences: List[SpecialPreferences]\n    cooking_time: CookingTime\n    ingredients: str\n    instructions: str\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the recipe.\n    \"\"\"\n    recipe: Optional[Recipe] = None\n\nclass SharedStateFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that demonstrates shared state between the agent and CopilotKit.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n \n        system_prompt = f\"\"\"You are a helpful assistant for creating recipes. \n        This is the current state of the recipe: {json.dumps(self.state.model_dump_json(), indent=2)}\n        You can modify the recipe by calling the generate_recipe tool.\n        If you have just created or modified the recipe, just answer in one sentence what you did.\n        \"\"\"\n\n        # 1. Here we specify that we want to stream the tool call to generate_recipe\n        #    to the frontend as state.\n        await copilotkit_predict_state({\n            \"recipe\": {\n                \"tool_name\": \"generate_recipe\",\n                \"tool_argument\": \"recipe\"\n            }\n        })\n\n        # 2. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 2.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 2.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    GENERATE_RECIPE_TOOL\n                ],\n\n                # 2.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 3. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        # 4. Handle tool call\n        if message.get(\"tool_calls\"):\n            tool_call = message[\"tool_calls\"][0]\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"function\"][\"name\"]\n            tool_call_args = json.loads(tool_call[\"function\"][\"arguments\"])\n\n            if tool_call_name == \"generate_recipe\":\n                for key, value in tool_call_args[\"recipe\"].items():\n                    setattr(self.state.recipe, key, value)\n\n                # 4.1 Append the result to the messages in state\n                self.state.messages.append({\n                    \"role\": \"tool\",\n                    \"content\": \"Recipe generated.\",\n                    \"tool_call_id\": tool_call_id\n                })\n                return \"route_follow_up\"\n\n        # 5. If our tool was not called, return to the end route\n        return \"route_end\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport { CopilotKit, useCoAgent, useCopilotChat } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nenum SkillLevel {\n  BEGINNER = \"Beginner\",\n  INTERMEDIATE = \"Intermediate\",\n  ADVANCED = \"Advanced\",\n}\n\nenum SpecialPreferences {\n  HighProtein = \"High Protein\",\n  LowCarb = \"Low Carb\",\n  Spicy = \"Spicy\",\n  BudgetFriendly = \"Budget-Friendly\",\n  OnePotMeal = \"One-Pot Meal\",\n  Vegetarian = \"Vegetarian\",\n  Vegan = \"Vegan\",\n}\n\nenum CookingTime {\n  FiveMin = \"5 min\",\n  FifteenMin = \"15 min\",\n  ThirtyMin = \"30 min\",\n  FortyFiveMin = \"45 min\",\n  SixtyPlusMin = \"60+ min\",\n}\n\nconst cookingTimeValues = [\n  { label: CookingTime.FiveMin, value: 0 },\n  { label: CookingTime.FifteenMin, value: 1 },\n  { label: CookingTime.ThirtyMin, value: 2 },\n  { label: CookingTime.FortyFiveMin, value: 3 },\n  { label: CookingTime.SixtyPlusMin, value: 4 },\n];\n\nexport default function SharedState() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"shared_state\"\n    >\n      <div\n        className=\"min-h-screen w-full flex items-center justify-center\"\n        style={\n          {\n            backgroundImage: \"url('./shared_state_background.png')\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            backgroundRepeat: \"no-repeat\",\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as React.CSSProperties\n        }\n      >\n        <Recipe />\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"AI Recipe Assistant\",\n            initial: \"Hi 👋 How can I help with your recipe?\",\n          }}\n          clickOutsideToClose={false}\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n\ninterface Recipe {\n  skill_level: SkillLevel;\n  special_preferences: SpecialPreferences[];\n  cooking_time: CookingTime;\n  ingredients: string;\n  instructions: string;\n}\n\ninterface RecipeAgentState {\n  recipe: Recipe;\n}\n\nconst INITIAL_STATE: RecipeAgentState = {\n  recipe: {\n    skill_level: SkillLevel.BEGINNER,\n    special_preferences: [],\n    cooking_time: CookingTime.FifteenMin,\n    ingredients: \"\",\n    instructions: \"\",\n  },\n};\n\nfunction Recipe() {\n  const { state: agentState, setState: setAgentState } =\n    useCoAgent<RecipeAgentState>({\n      name: \"shared_state\",\n      initialState: INITIAL_STATE,\n    });\n\n  const [recipe, setRecipe] = useState(INITIAL_STATE.recipe);\n  const { appendMessage, isLoading } = useCopilotChat();\n\n  const updateRecipe = (partialRecipe: Partial<Recipe>) => {\n    setAgentState({\n      ...agentState,\n      recipe: {\n        ...recipe,\n        ...partialRecipe,\n      },\n    });\n    setRecipe({\n      ...recipe,\n      ...partialRecipe,\n    });\n  };\n\n  const newRecipeState = { ...recipe };\n  const newChangedKeys = [];\n  const changedKeysRef = useRef<string[]>([]);\n\n  for (const key in recipe) {\n    if (\n      (agentState.recipe as any)[key] !== undefined &&\n      (agentState.recipe as any)[key] !== null\n    ) {\n      let agentValue = (agentState.recipe as any)[key];\n      const recipeValue = (recipe as any)[key];\n\n      if (Array.isArray(agentValue) && Array.isArray(recipeValue)) {\n        agentValue.sort();\n      }\n\n      // Check if agentValue is a string and replace \\n with actual newlines\n      if (typeof agentValue === \"string\") {\n        agentValue = agentValue.replace(/\\\\n/g, \"\\n\");\n      }\n\n      if (JSON.stringify(agentValue) !== JSON.stringify(recipeValue)) {\n        (newRecipeState as any)[key] = agentValue;\n        newChangedKeys.push(key);\n      }\n    }\n  }\n\n  if (newChangedKeys.length > 0) {\n    changedKeysRef.current = newChangedKeys;\n  } else if (!isLoading) {\n    changedKeysRef.current = [];\n  }\n\n  useEffect(() => {\n    setRecipe(newRecipeState);\n  }, [JSON.stringify(newRecipeState)]);\n\n  const handleSkillLevelChange = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    updateRecipe({\n      skill_level: event.target.value as SkillLevel,\n    });\n  };\n\n  const handlePreferenceChange = (\n    preference: SpecialPreferences,\n    checked: boolean\n  ) => {\n    if (checked) {\n      updateRecipe({\n        special_preferences: [\n          ...agentState.recipe.special_preferences,\n          preference,\n        ],\n      });\n    } else {\n      updateRecipe({\n        special_preferences: agentState.recipe.special_preferences.filter(\n          (p) => p !== preference\n        ),\n      });\n    }\n  };\n\n  const handleCookingTimeChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    updateRecipe({\n      cooking_time: cookingTimeValues[Number(event.target.value)].label,\n    });\n  };\n\n  const handleIngredientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    updateRecipe({\n      ingredients: event.target.value,\n    });\n  };\n\n  const handleInstructionsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    updateRecipe({\n      instructions: event.target.value,\n    });\n  };\n\n  return (\n    <form\n      className=\"w-full max-w-lg p-6 rounded shadow-md\"\n      style={{\n        backgroundColor: \"rgba(255, 255, 255, 0.9)\", // Semi-transparent white\n        backdropFilter: \"blur(10px)\", // Apply blur for frosted effect\n        WebkitBackdropFilter: \"blur(10px)\", // For Safari support\n        boxShadow: \"0 4px 30px rgba(0, 0, 0, 0.1)\", // Subtle shadow for depth\n      }}\n    >\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"skill_level\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"skillLevel\"\n        >\n          Skill Level\n        </label>\n        <select\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          id=\"skillLevel\"\n          value={recipe.skill_level}\n          onChange={handleSkillLevelChange}\n        >\n          {Object.values(SkillLevel).map((level) => (\n            <option key={level} value={level}>\n              {level}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"cooking_time\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"cookingTime\"\n        >\n          Cooking Time: {recipe.cooking_time}\n        </label>\n        <input\n          type=\"range\"\n          id=\"cookingTime\"\n          min=\"0\"\n          max={cookingTimeValues.length - 1}\n          value={cookingTimeValues.findIndex(\n            (value) => value.label === recipe.cooking_time\n          )}\n          onChange={handleCookingTimeChange}\n          className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"special_preferences\") && <Ping />}\n        <label className=\"block text-gray-700 text-sm font-bold mb-4\">\n          Special Preferences:\n        </label>\n        <div className=\"flex flex-wrap mt-2\">\n          {Object.values(SpecialPreferences).map((preference) => (\n            <label\n              key={preference}\n              className=\"flex items-center mr-4 mb-2 whitespace-nowrap uppercase\"\n              style={{ fontSize: \"10px\", fontWeight: \"bold\" }}\n            >\n              <input\n                type=\"checkbox\"\n                checked={recipe.special_preferences.includes(preference)}\n                onChange={(e) =>\n                  handlePreferenceChange(preference, e.target.checked)\n                }\n                className=\"mr-1\"\n              />\n              {preference}\n            </label>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"ingredients\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"ingredients\"\n        >\n          Ingredients:\n        </label>\n        <textarea\n          id=\"ingredients\"\n          value={recipe.ingredients}\n          onChange={handleIngredientsChange}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          rows={4}\n          placeholder=\"Enter ingredients here...\"\n        />\n      </div>\n\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"instructions\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"instructions\"\n        >\n          Instructions:\n        </label>\n        <textarea\n          id=\"instructions\"\n          value={recipe.instructions}\n          onChange={handleInstructionsChange}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          rows={6}\n          placeholder=\"Enter instructions here...\"\n        />\n      </div>\n\n      <div className=\"flex items-center justify-end mt-2\">\n        <button\n          className={`${\n            isLoading\n              ? \"bg-gray-400 cursor-not-allowed\"\n              : \"bg-black hover:bg-gray-800\"\n          } text-white font-base py-2 px-4 rounded focus:outline-none focus:shadow-outline`}\n          type=\"button\"\n          onClick={() => {\n            if (!isLoading) {\n              appendMessage(\n                new TextMessage({\n                  content: \"Improve the recipe\",\n                  role: Role.User,\n                })\n              );\n            }\n          }}\n          disabled={isLoading}\n        >\n          {isLoading ? \"Please Wait...\" : \"Improve with AI\"}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction Ping() {\n  return (\n    <span className=\"absolute flex size-3 top-0 right-0\">\n      <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-sky-400 opacity-75\"></span>\n      <span className=\"relative inline-flex size-3 rounded-full bg-sky-500\"></span>\n    </span>\n  );\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🍳 Shared State Recipe Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **shared state** functionality - a powerful feature that enables bidirectional data flow between:\n1. **Frontend → Agent**: UI controls update the agent's context in real-time\n2. **Agent → Frontend**: The Copilot's recipe creations instantly update the UI components\n\nIt's like having a cooking buddy who not only listens to what you want but also updates your recipe card as you chat - no refresh needed! ✨\n\n## How to Interact\n\nMix and match any of these parameters (or none at all - it's up to you!):\n- **Skill Level**: Beginner to expert 👨‍🍳\n- **Cooking Time**: Quick meals or slow cooking ⏱️\n- **Special Preferences**: Dietary needs, flavor profiles, health goals 🥗\n- **Ingredients**: Items you want to include 🧅🥩🍄\n- **Instructions**: Any specific steps\n\nThen chat with your Copilot chef with prompts like:\n- \"I'm a beginner cook. Can you make me a quick dinner?\"\n- \"I need something spicy with chicken that takes under 30 minutes!\"\n\n## ✨ Shared State Magic in Action\n\n**What's happening technically:**\n- The UI and Copilot agent share the same state object (**Agent State = UI State**)\n- Changes from either side automatically update the other\n- Neither side needs to manually request updates from the other\n\n**What you'll see in this demo:**\n- Set cooking time to 20 minutes in the UI and watch the Copilot immediately respect your time constraint\n- Add ingredients through the UI and see them appear in your recipe\n- When the Copilot suggests new ingredients, watch them automatically appear in the UI ingredients list\n- Change your skill level and see how the Copilot adapts its instructions in real-time\n\nThis synchronized state creates a seamless experience where the agent always has your current preferences, and any updates to the recipe are instantly reflected in both places.\n\nThis shared state pattern can be applied to any application where you want your UI and Copilot to work together in perfect harmony! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "predictive_state_updates": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA demo of predictive state updates.\n\"\"\"\n\nimport json\nimport uuid\nfrom typing import Optional\nfrom litellm import completion\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  copilotkit_predict_state,\n  CopilotKitState\n)\n\nWRITE_DOCUMENT_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"write_document\",\n        \"description\": \" \".join(\"\"\"\n            Write a document. Use markdown formatting to format the document.\n            It's good to format the document extensively so it's easy to read.\n            You can use all kinds of markdown.\n            However, do not use italic or strike-through formatting, it's reserved for another purpose.\n            You MUST write the full document, even when changing only a few words.\n            When making edits to the document, try to make them minimal - do not change every word.\n            Keep stories SHORT!\n            \"\"\".split()),\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"document\": {\n                    \"type\": \"string\",\n                    \"description\": \"The document to write\"\n                },\n            },\n        }\n    }\n}\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the agent.\n    \"\"\"\n    document: Optional[str] = None\n\nclass PredictiveStateUpdatesFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that demonstrates predictive state updates.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n        system_prompt = f\"\"\"\n        You are a helpful assistant for writing documents. \n        To write the document, you MUST use the write_document tool.\n        You MUST write the full document, even when changing only a few words.\n        When you wrote the document, DO NOT repeat it as a message. \n        Just briefly summarize the changes you made. 2 sentences max.\n        This is the current state of the document: ----\\n {self.state.document}\\n-----\n        \"\"\"\n\n        # 1. Here we specify that we want to stream the tool call to write_document\n        #    to the frontend as state.\n        await copilotkit_predict_state({\n            \"document\": {\n                \"tool_name\": \"write_document\",\n                \"tool_argument\": \"document\"\n            }\n        })\n\n        # 2. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 2.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 2.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    WRITE_DOCUMENT_TOOL\n                ],\n\n                # 2.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 3. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        # 4. Handle tool call\n        if message.get(\"tool_calls\"):\n            tool_call = message[\"tool_calls\"][0]\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"function\"][\"name\"]\n            tool_call_args = json.loads(tool_call[\"function\"][\"arguments\"])\n\n            if tool_call_name == \"write_document\":\n                self.state.document = tool_call_args[\"document\"]\n\n                # 4.1 Append the result to the messages in state\n                self.state.messages.append({\n                    \"role\": \"tool\",\n                    \"content\": \"Document written.\",\n                    \"tool_call_id\": tool_call_id\n                })\n\n                # 4.2 Append a tool call to confirm changes\n                self.state.messages.append({\n                    \"role\": \"assistant\",\n                    \"content\": \"\",\n                    \"tool_calls\": [{\n                        \"id\": str(uuid.uuid4()),\n                        \"function\": {\n                            \"name\": \"confirm_changes\",\n                            \"arguments\": \"{}\"\n                        }\n                    }]\n                })\n\n                return \"route_end\"\n\n        # 5. If our tool was not called, return to the end route\n        return \"route_end\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nimport MarkdownIt from \"markdown-it\";\n\nimport { diffWords } from \"diff\";\nimport { useEditor, EditorContent } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport { useEffect, useState } from \"react\";\nimport {\n  CopilotKit,\n  useCoAgent,\n  useCopilotAction,\n  useCopilotChat,\n} from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\n\nconst extensions = [StarterKit];\n\nexport default function PredictiveStateUpdates() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"predictive_state_updates\"\n    >\n      <div\n        className=\"min-h-screen w-full\"\n        style={\n          {\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as React.CSSProperties\n        }\n      >\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"AI Document Editor\",\n            initial: \"Hi 👋 How can I help with your document?\",\n          }}\n          clickOutsideToClose={false}\n        >\n          <DocumentEditor />\n        </CopilotSidebar>\n      </div>\n    </CopilotKit>\n  );\n}\n\ninterface AgentState {\n  document: string;\n}\n\nconst DocumentEditor = () => {\n  const editor = useEditor({\n    extensions,\n    immediatelyRender: false,\n    editorProps: {\n      attributes: { class: \"min-h-screen p-10\" },\n    },\n  });\n  const [placeholderVisible, setPlaceholderVisible] = useState(false);\n  const [currentDocument, setCurrentDocument] = useState(\"\");\n  const { isLoading } = useCopilotChat();\n\n  const {\n    state: agentState,\n    setState: setAgentState,\n    nodeName,\n  } = useCoAgent<AgentState>({\n    name: \"predictive_state_updates\",\n    initialState: {\n      document: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setCurrentDocument(editor?.getText() || \"\");\n    }\n    editor?.setEditable(!isLoading);\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (nodeName == \"end\") {\n      // set the text one final time when loading is done\n      if (\n        currentDocument.trim().length > 0 &&\n        currentDocument !== agentState?.document\n      ) {\n        const newDocument = agentState?.document || \"\";\n        const diff = diffPartialText(currentDocument, newDocument, true);\n        const markdown = fromMarkdown(diff);\n        editor?.commands.setContent(markdown);\n      }\n    }\n  }, [nodeName]);\n\n  useEffect(() => {\n    if (isLoading) {\n      if (currentDocument.trim().length > 0) {\n        const newDocument = agentState?.document || \"\";\n        const diff = diffPartialText(currentDocument, newDocument);\n        const markdown = fromMarkdown(diff);\n        editor?.commands.setContent(markdown);\n      } else {\n        const markdown = fromMarkdown(agentState?.document || \"\");\n        editor?.commands.setContent(markdown);\n      }\n    }\n  }, [agentState?.document]);\n\n  const text = editor?.getText() || \"\";\n\n  useEffect(() => {\n    setPlaceholderVisible(text.length === 0);\n\n    if (!isLoading) {\n      setCurrentDocument(text);\n      setAgentState({\n        document: text,\n      });\n    }\n  }, [text]);\n\n  useCopilotAction({\n    name: \"confirm_changes\",\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      const [accepted, setAccepted] = useState<boolean | null>(null);\n      return (\n        <div className=\"bg-white p-6 rounded shadow-lg border border-gray-200 mt-5 mb-5\">\n          <h2 className=\"text-lg font-bold mb-4\">Confirm Changes</h2>\n          <p className=\"mb-6\">Do you want to accept the changes?</p>\n          {accepted === null && (\n            <div className=\"flex justify-end space-x-4\">\n              <button\n                className={`bg-gray-200 text-black py-2 px-4 rounded disabled:opacity-50 ${\n                  status === \"executing\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                disabled={status !== \"executing\"}\n                onClick={() => {\n                  if (respond) {\n                    setAccepted(false);\n                    editor?.commands.setContent(fromMarkdown(currentDocument));\n                    setAgentState({\n                      document: currentDocument,\n                    });\n                    respond({ accepted: false });\n                  }\n                }}\n              >\n                Reject\n              </button>\n              <button\n                className={`bg-black text-white py-2 px-4 rounded disabled:opacity-50 ${\n                  status === \"executing\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                disabled={status !== \"executing\"}\n                onClick={() => {\n                  if (respond) {\n                    setAccepted(true);\n                    editor?.commands.setContent(\n                      fromMarkdown(agentState?.document || \"\")\n                    );\n                    setCurrentDocument(agentState?.document || \"\");\n                    setAgentState({\n                      document: agentState?.document || \"\",\n                    });\n                    respond({ accepted: true });\n                  }\n                }}\n              >\n                Confirm\n              </button>\n            </div>\n          )}\n          {accepted !== null && (\n            <div className=\"flex justify-end\">\n              <div className=\"mt-4 bg-gray-200 text-black py-2 px-4 rounded inline-block\">\n                {accepted ? \"✓ Accepted\" : \"✗ Rejected\"}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"relative min-h-screen w-full\">\n      {placeholderVisible && (\n        <div className=\"absolute top-6 left-6 m-4 pointer-events-none text-gray-400\">\n          Your content goes here...\n        </div>\n      )}\n      <EditorContent editor={editor} />\n    </div>\n  );\n};\n\nfunction fromMarkdown(text: string) {\n  const md = new MarkdownIt({\n    typographer: true,\n    html: true,\n  });\n\n  return md.render(text);\n}\n\nfunction diffPartialText(\n  oldText: string,\n  newText: string,\n  isComplete: boolean = false\n) {\n  let oldTextToCompare = oldText;\n  if (oldText.length > newText.length && !isComplete) {\n    // make oldText shorter\n    oldTextToCompare = oldText.slice(0, newText.length);\n  }\n\n  const changes = diffWords(oldTextToCompare, newText);\n\n  let result = \"\";\n  changes.forEach((part) => {\n    if (part.added) {\n      result += `<em>${part.value}</em>`;\n    } else if (part.removed) {\n      result += `<s>${part.value}</s>`;\n    } else {\n      result += part.value;\n    }\n  });\n\n  if (oldText.length > newText.length && !isComplete) {\n    result += oldText.slice(newText.length);\n  }\n\n  return result;\n}\n\nfunction isAlpha(text: string) {\n  return /[a-zA-Z\\u00C0-\\u017F]/.test(text.trim());\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": "/* Basic editor styles */\n.tiptap-container {\n  height: 100vh; /* Full viewport height */\n  width: 100vw; /* Full viewport width */\n  display: flex;\n  flex-direction: column;\n}\n\n.tiptap {\n  flex: 1; /* Take up remaining space */\n  overflow: auto; /* Allow scrolling if content overflows */\n}\n\n.tiptap :first-child {\n  margin-top: 0;\n}\n\n/* List styles */\n.tiptap ul,\n.tiptap ol {\n  padding: 0 1rem;\n  margin: 1.25rem 1rem 1.25rem 0.4rem;\n}\n\n.tiptap ul li p,\n.tiptap ol li p {\n  margin-top: 0.25em;\n  margin-bottom: 0.25em;\n}\n\n/* Heading styles */\n.tiptap h1,\n.tiptap h2,\n.tiptap h3,\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  line-height: 1.1;\n  margin-top: 2.5rem;\n  text-wrap: pretty;\n  font-weight: bold;\n}\n\n.tiptap h1,\n.tiptap h2,\n.tiptap h3,\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  margin-top: 3.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.tiptap p {\n  margin-bottom: 1rem;\n}\n\n.tiptap h1 {\n  font-size: 1.4rem;\n}\n\n.tiptap h2 {\n  font-size: 1.2rem;\n}\n\n.tiptap h3 {\n  font-size: 1.1rem;\n}\n\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  font-size: 1rem;\n}\n\n/* Code and preformatted text styles */\n.tiptap code {\n  background-color: var(--purple-light);\n  border-radius: 0.4rem;\n  color: var(--black);\n  font-size: 0.85rem;\n  padding: 0.25em 0.3em;\n}\n\n.tiptap pre {\n  background: var(--black);\n  border-radius: 0.5rem;\n  color: var(--white);\n  font-family: \"JetBrainsMono\", monospace;\n  margin: 1.5rem 0;\n  padding: 0.75rem 1rem;\n}\n\n.tiptap pre code {\n  background: none;\n  color: inherit;\n  font-size: 0.8rem;\n  padding: 0;\n}\n\n.tiptap blockquote {\n  border-left: 3px solid var(--gray-3);\n  margin: 1.5rem 0;\n  padding-left: 1rem;\n}\n\n.tiptap hr {\n  border: none;\n  border-top: 1px solid var(--gray-2);\n  margin: 2rem 0;\n}\n\n.tiptap s {\n  background-color: #f9818150;\n  padding: 2px;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.7);\n}\n\n.tiptap em {\n  background-color: #b2f2bb;\n  padding: 2px;\n  font-weight: bold;\n  font-style: normal;\n}\n\n.copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 📝 Predictive State Updates Document Editor\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **predictive state updates** for real-time document collaboration:\n1. **Live Document Editing**: Watch as your Copilot makes changes to a document in real-time\n2. **Diff Visualization**: See exactly what's being changed as it happens\n3. **Streaming Updates**: Changes are displayed character-by-character as the Copilot works\n\n## How to Interact\n\nTry these interactions with the collaborative document editor:\n- \"Fix the grammar and typos in this document\"\n- \"Make this text more professional\"\n- \"Add a section about [topic]\"\n- \"Summarize this content in bullet points\"\n- \"Change the tone to be more casual\"\n\nWatch as the Copilot processes your request and edits the document in real-time right before your eyes.\n\n## ✨ Predictive State Updates in Action\n\n**What's happening technically:**\n- The document state is shared between your UI and the Copilot\n- As the Copilot generates content, changes are streamed to the UI\n- Each modification is visualized with additions and deletions\n- The UI renders these changes progressively, without waiting for completion\n- All edits are tracked and displayed in a visually intuitive way\n\n**What you'll see in this demo:**\n- Text changes are highlighted in different colors (green for additions, red for deletions)\n- The document updates character-by-character, creating a typing-like effect\n- You can see the Copilot's thought process as it refines the content\n- The final document seamlessly incorporates all changes\n- The experience feels collaborative, as if someone is editing alongside you\n\nThis pattern of real-time collaborative editing with diff visualization is perfect for document editors, code review tools, content creation platforms, or any application where users benefit from seeing exactly how content is being transformed! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "tool_based_generative_ui": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating tool-based generative UI.\n\"\"\"\n\nfrom crewai.flow.flow import Flow, start\nfrom copilotkit.crewai import copilotkit_stream, CopilotKitState\nfrom litellm import completion\n\n\n# This tool generates a haiku on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nGENERATE_HAIKU_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_haiku\",\n        \"description\": \"Generate a haiku in Japanese and its English translation\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"japanese\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"An array of three lines of the haiku in Japanese\"\n                },\n                \"english\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"An array of three lines of the haiku in English\"\n                }\n            },\n            \"required\": [\"japanese\", \"english\"]\n        }\n    }\n}\n\n\nclass ToolBasedGenerativeUIFlow(Flow[CopilotKitState]):\n    \"\"\"\n    A flow that demonstrates tool-based generative UI.\n    \"\"\"\n\n    @start()\n    async def chat(self):\n        \"\"\"\n        The main function handling chat and tool calls.\n        \"\"\"\n        system_prompt = \"You assist the user in generating a haiku.\"\n\n\n        # 1. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 1.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 1.2 Bind the available tools to the model\n                tools=[ GENERATE_HAIKU_TOOL ],\n\n                # 1.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 2. Append the message to the messages in state\n        self.state.messages.append(message)\n\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nexport default function AgenticChat() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"tool_based_generative_ui\"\n    >\n      <div\n        className=\"min-h-full w-full flex items-center justify-center\"\n        style={\n          {\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as CopilotKitCSSProperties\n        }\n      >\n        <Haiku />\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"Haiku Generator\",\n            initial: \"I'm a haiku generator 👋. How can I help you?\",\n          }}\n          clickOutsideToClose={false}\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n\nfunction Haiku() {\n  const [haiku, setHaiku] = useState<{\n    japanese: string[];\n    english: string[];\n  }>({\n    japanese: [\"仮の句よ\", \"まっさらながら\", \"花を呼ぶ\"],\n    english: [\n      \"A placeholder verse—\",\n      \"even in a blank canvas,\",\n      \"it beckons flowers.\",\n    ],\n  });\n\n  useCopilotAction({\n    name: \"generate_haiku\",\n    parameters: [\n      {\n        name: \"japanese\",\n        type: \"string[]\",\n      },\n      {\n        name: \"english\",\n        type: \"string[]\",\n      },\n    ],\n    followUp: false,\n    handler: async () => {\n      return \"Haiku generated.\";\n    },\n    render: ({ args: generatedHaiku, result, status }) => {\n      const [isApplied, setIsApplied] = useState(false);\n      if (\n        !generatedHaiku ||\n        !generatedHaiku.japanese ||\n        !generatedHaiku.japanese.length\n      ) {\n        return <></>;\n      }\n\n      return (\n        <div className=\"text-left rounded-md p-4 mt-4 mb-4 flex flex-col bg-gray-100\">\n          <div\n            className={\n              status === \"complete\" ? \"border-b border-gray-300 mb-4\" : \"\"\n            }\n          >\n            {generatedHaiku?.japanese?.map((line, index) => (\n              <div className=\"flex items-center gap-3 mb-2 pb-2\" key={index}>\n                <p className=\"text-lg font-bold\">{line}</p>\n                <p className=\"text-sm font-light\">\n                  {generatedHaiku?.english?.[index]}\n                </p>\n              </div>\n            ))}\n          </div>\n          {status === \"complete\" && (\n            <button\n              onClick={() => {\n                setHaiku(generatedHaiku);\n                setIsApplied(true);\n              }}\n              className=\"ml-auto px-3 py-1 bg-white text-black text-sm rounded cursor-pointer font-sm border \"\n            >\n              {isApplied ? \"Applied ✓\" : \"Apply\"}\n            </button>\n          )}\n        </div>\n      );\n    },\n  });\n  return (\n    <>\n      <div className=\"text-left\">\n        {haiku?.japanese.map((line, index) => (\n          <div className=\"flex items-center gap-6 mb-2\" key={index}>\n            <p className=\"text-4xl font-bold text-gray-500\">{line}</p>\n            <p className=\"text-base font-light\">{haiku?.english?.[index]}</p>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🪶 Tool-Based Generative UI Haiku Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **tool-based generative UI** capabilities:\n1. **Frontend Rendering of Tool Calls**: Backend tool calls are automatically rendered in the UI\n2. **Dynamic UI Generation**: The UI updates in real-time as the agent generates content\n3. **Elegant Content Presentation**: Complex structured data (haikus) are beautifully displayed\n\n## How to Interact\n\nChat with your Copilot and ask for haikus about different topics:\n- \"Create a haiku about nature\"\n- \"Write a haiku about technology\"\n- \"Generate a haiku about the changing seasons\"\n- \"Make a humorous haiku about programming\"\n\nEach request will trigger the agent to generate a haiku and display it in a visually appealing card format in the UI.\n\n## ✨ Tool-Based Generative UI in Action\n\n**What's happening technically:**\n- The agent processes your request and determines it should create a haiku\n- It calls a backend tool that returns structured haiku data\n- CopilotKit automatically renders this tool call in the frontend\n- The rendering is handled by the registered tool component in your React app\n- No manual state management is required to display the results\n\n**What you'll see in this demo:**\n- As you request a haiku, a beautifully formatted card appears in the UI\n- The haiku follows the traditional 5-7-5 syllable structure\n- Each haiku is presented with consistent styling\n- Multiple haikus can be generated in sequence\n- The UI adapts to display each new piece of content\n\nThis pattern of tool-based generative UI can be extended to create any kind of dynamic content - from data visualizations to interactive components, all driven by your Copilot's tool calls! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "crew_enterprise": {
    "files": [
      {
        "name": "restaurant_finder_crew/src/config/__init__.py",
        "content": "# This file is required to make the directory a Python package.\n# By including an __init__.py file, Python treats the directory as a package,\n# allowing you to import modules from this directory.\n# This file can be empty, or it can execute initialization code for the package.\n# In this case, it is left empty as a placeholder to signify the directory as a package.\n",
        "path": "restaurant_finder_crew/src/config/__init__.py",
        "language": "python"
      },
      {
        "name": "restaurant_finder_crew/src/config/agents.yaml",
        "content": "restaurant_researcher:\n  role: Restaurant Research Specialist\n  goal: Find restaurants in specified locations and gather details about them\n  backstory: >\n    You are an expert at finding restaurants and understanding their characteristics.\n    You have extensive knowledge of cuisines, dining styles, price points, and \n    locations. You know how to search for the most relevant and highly-rated\n    restaurants in any area.\n\nrecommendation_specialist:\n  role: Restaurant Recommendation Specialist\n  goal: Create personalized restaurant recommendations based on research\n  backstory: >\n    You are skilled at curating restaurant recommendations that match people's\n    preferences. You have a talent for highlighting the unique aspects of restaurants\n    and explaining why they would be good choices. You know how to present\n    restaurant options in an engaging and helpful way.\n",
        "path": "restaurant_finder_crew/src/config/agents.yaml",
        "language": "yaml"
      },
      {
        "name": "restaurant_finder_crew/src/config/tasks.yaml",
        "content": "search_restaurants_task:\n  description: >\n    Search for popular and highly-rated restaurants in {location}. Include a variety of \n    cuisines, price points, and dining styles. For each restaurant, gather information\n    about their cuisine, price range, ratings, popular dishes, and any unique features.\n  expected_output: >\n    A detailed list of at least 8 restaurants in {location}, with information about\n    cuisine type, price range, ratings, signature dishes, and any standout characteristics.\n\npresent_recommendations_task:\n  description: >\n    Review the restaurants found in {location} and create a curated list of recommendations.\n    Highlight what makes each restaurant special and why someone might want to visit.\n    Present these recommendations in a friendly, conversational way. Then ask the user\n    if they'd like more recommendations or if these options are sufficient.\n  expected_output: >\n    A well-organized list of restaurant recommendations with engaging descriptions,\n    followed by a question asking if the user would like more recommendations.\n\n    **Restaurant Recommendations**\n\n    - **Restaurant Name**: Description of what makes this restaurant special.\n      - **Cuisine**: Type of cuisine\n      - **Price Range**: Price range\n      - **Ratings**: Ratings\n      - **Signature Dishes**: Signature dishes\n      - **Standout Characteristics**: Any standout characteristics\n\n    **Would you like more recommendations?**\n\nrespond_to_feedback_task:\n  description: >\n    Based on the user's response to the recommendations, either:\n    1. If they say \"thank you\" or indicate satisfaction, provide a friendly closing response\n       along with the finalized list of recommendations.\n    2. If they ask for more recommendations, provide 3-5 additional restaurant options\n       with different cuisines or characteristics from the first set.\n  expected_output: >\n    Either a gracious closing message with the finalized list of recommendations\n    or a new set of restaurant recommendations that complement the initial suggestions.\n",
        "path": "restaurant_finder_crew/src/config/tasks.yaml",
        "language": "yaml"
      },
      {
        "name": "restaurant_finder_crew/src/tools/__init__.py",
        "content": "",
        "path": "restaurant_finder_crew/src/tools/__init__.py",
        "language": "python"
      },
      {
        "name": "restaurant_finder_crew/src/tools/custom_tool.py",
        "content": "from crewai_tools import BaseTool\n\n\nclass MyCustomTool(BaseTool):\n    name: str = \"Name of my tool\"\n    description: str = (\n        \"Clear description for what this tool is useful for, you agent will need this information to use it.\"\n    )\n\n    def _run(self, argument: str) -> str:\n        # Implementation goes here\n        return \"this is an example of a tool output, ignore it and move along.\"\n",
        "path": "restaurant_finder_crew/src/tools/custom_tool.py",
        "language": "python"
      },
      {
        "name": "restaurant_finder_crew/src/crew.py",
        "content": "from crewai_tools import ScrapeWebsiteTool, SerperDevTool\n\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\n\n\n@CrewBase\nclass SimilarCompanyFinderTemplateCrew:\n    \"\"\"Restaurant Recommendation Crew\"\"\"\n\n    agents_config = \"config/agents.yaml\"\n    tasks_config = \"config/tasks.yaml\"\n\n    @agent\n    def restaurant_researcher(self) -> Agent:\n        return Agent(\n            config=self.agents_config[\"restaurant_researcher\"],\n            tools=[SerperDevTool(), ScrapeWebsiteTool()],\n            allow_delegation=False,\n            verbose=True,\n        )\n\n    @agent\n    def recommendation_specialist(self) -> Agent:\n        return Agent(\n            config=self.agents_config[\"recommendation_specialist\"],\n            tools=[],\n            allow_delegation=False,\n            verbose=True,\n        )\n\n    @task\n    def search_restaurants_task(self) -> Task:\n        return Task(\n            config=self.tasks_config[\"search_restaurants_task\"],\n            agent=self.restaurant_researcher(),\n        )\n\n    @task\n    def present_recommendations_task(self) -> Task:\n        return Task(\n            config=self.tasks_config[\"present_recommendations_task\"],\n            agent=self.recommendation_specialist(),\n            human_input=True,\n        )\n\n    @task\n    def respond_to_feedback_task(self) -> Task:\n        return Task(\n            config=self.tasks_config[\"respond_to_feedback_task\"],\n            agent=self.recommendation_specialist(),\n            output_file=\"restaurant_recommendations.md\",\n        )\n\n    @crew\n    def crew(self) -> Crew:\n        \"\"\"Creates the Restaurant Recommendation crew\"\"\"\n        return Crew(\n            agents=self.agents,  # Automatically created by the @agent decorator\n            tasks=self.tasks,  # Automatically created by the @task decorator\n            process=Process.sequential,\n            verbose=True,\n            # process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/\n        )\n\n    def run(self, inputs=None):\n        \"\"\"Run the crew\n        \n        Args:\n            inputs (dict, optional): Input parameters for the crew\n        \"\"\"\n        if inputs is None:\n            inputs = {\n                \"location\": \"San Francisco, CA\",\n            }\n            \n        return self.crew().kickoff(inputs=inputs)\n",
        "path": "restaurant_finder_crew/src/crew.py",
        "language": "python"
      },
      {
        "name": "restaurant_finder_crew/src/main.py",
        "content": "#!/usr/bin/env python\nimport sys\n\nfrom similar_company_finder_template.crew import SimilarCompanyFinderTemplateCrew\n\n# This main file is intended to be a way for your to run your\n# crew locally, so refrain from adding necessary logic into this file.\n# Replace with inputs you want to test with, it will automatically\n# interpolate any tasks and agents information\n\n\ndef run():\n    \"\"\"\n    Run the crew.\n    \"\"\"\n    inputs = {\n        \"location\": \"San Francisco, CA\",\n    }\n\n    SimilarCompanyFinderTemplateCrew().run(inputs=inputs)\n\n\ndef train():\n    \"\"\"\n    Train the crew for a given number of iterations.\n    \"\"\"\n    inputs = {\"location\": \"New York, NY\"}\n    try:\n        SimilarCompanyFinderTemplateCrew().crew().train(\n            n_iterations=int(sys.argv[1]), filename=sys.argv[2], inputs=inputs\n        )\n\n    except Exception as e:\n        raise Exception(f\"An error occurred while training the crew: {e}\")\n\n\ndef replay():\n    \"\"\"\n    Replay the crew execution from a specific task.\n    \"\"\"\n    try:\n        SimilarCompanyFinderTemplateCrew().crew().replay(task_id=sys.argv[1])\n\n    except Exception as e:\n        raise Exception(f\"An error occurred while replaying the crew: {e}\")\n\n\ndef test():\n    \"\"\"\n    Test the crew execution and returns the results.\n    \"\"\"\n    inputs = {\"location\": \"Chicago, IL\"}\n    try:\n        SimilarCompanyFinderTemplateCrew().crew().test(\n            n_iterations=int(sys.argv[1]), openai_model_name=sys.argv[2], inputs=inputs\n        )\n\n    except Exception as e:\n        raise Exception(f\"An error occurred while replaying the crew: {e}\")\n",
        "path": "restaurant_finder_crew/src/main.py",
        "language": "python"
      },
      {
        "name": "restaurant_finder_crew/pyproject.toml",
        "content": "[project]\nname = \"similar_company_finder_template\"\nversion = \"0.1.0\"\ndescription = \"similar-company-finder-template using crewAI\"\nauthors = [\n    { name = \"Your Name\", email = \"you@example.com\" },\n]\nrequires-python = \">=3.10,<=3.13\"\ndependencies = [\n    \"crewai[tools]>=0.102.0\",\n    \"langchain-core>=0.2.30\",\n]\n\n[project.scripts]\nsimilar_company_finder_template = \"similar_company_finder_template.main:run\"\nrun_crew = \"similar_company_finder_template.main:run\"\ntrain = \"similar_company_finder_template.main:train\"\nreplay = \"similar_company_finder_template.main:replay\"\ntest = \"similar_company_finder_template.main:test\"\n\n[build-system]\nrequires = [\n    \"hatchling\",\n]\nbuild-backend = \"hatchling.build\"\n",
        "path": "restaurant_finder_crew/pyproject.toml",
        "language": "toml"
      },
      {
        "name": "restaurant_finder_crew/README.md",
        "content": "# Restaurant Finder Crew\n\nWelcome to the Restaurant Finder Crew project, powered by [crewAI](https://crewai.com).\n\n## Installation\n\nEnsure you have Python >=3.10 <=3.13 installed on your system. This project uses [UV](https://docs.astral.sh/uv/) for dependency management and package handling, offering a seamless setup and execution experience.\n\nFirst, if you haven't already, install uv:\n\n## Features\n\n- Human In the Loop\n- Streaming Responses to your Frontend\n\n## Deploy\n\nThe easiest way to deploy your crew is through CrewAI Enterprise, where you can deploy your crew in a few clicks. Simply log in to your CrewAI Enterprise account, navigate to the deployment section, and follow the intuitive steps to get your Restaurant Finder Crew up and running effortlessly. For more details, check out the [crewAI Quickstart Guide](https://docs.crewai.com/quickstart#deploying-your-project).\n\n## Note\n\nCrewAI Enterprise prefers that the Crew code is maintained in a separate repository. Therefore, you will need to provision a separate repository for this folder to ensure proper deployment and management.\n",
        "path": "restaurant_finder_crew/README.md",
        "language": "markdown"
      },
      {
        "name": "ui/page.tsx",
        "content": "// @ts-nocheck\n\"use client\";\n\nimport AgentStatus from \"@/components/AgentStatus\";\nimport { DebugViewer } from \"@/components/DebugViewer\";\nimport FormattedContent, { formatContent } from \"@/components/FormattedContent\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\";\nimport { useGlobalContext } from \"@/context/GlobalContext\";\nimport { useInput } from \"@/hooks/useInput\";\nimport { useWindowSize } from \"@/hooks/useWindowSize\";\nimport { formatText } from \"@/lib/utils\";\nimport {\n  useCoAgent,\n  useCoAgentStateRender,\n  useCopilotAction,\n  useCopilotChat,\n} from \"@copilotkit/react-core\";\nimport {\n  AgentState,\n  CopilotChat,\n  CopilotKitCSSProperties,\n  DefaultResponseRenderer,\n  DefaultStateRenderer,\n  ResponseStatus,\n} from \"@copilotkit/react-ui\";\nimport { MessageRole, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport { useEffect, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\ninterface CrewFeedback {\n  timestamp: string;\n  id: string;\n  task_id: string;\n  task_output: string;\n}\n\n// Simple skeleton item for loading state\nconst SkeletonItem = () => (\n  <div className=\"py-0.5 animate-pulse\">\n    <div className=\"flex justify-between\">\n      <div className=\"h-2.5 bg-gray-200 dark:bg-gray-700 rounded w-16\"></div>\n      <div className=\"h-2 bg-gray-200 dark:bg-gray-700 rounded w-8\"></div>\n    </div>\n    <div className=\"mt-0.5 h-6 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n  </div>\n);\n\n// Application state extending the library AgentState\ninterface AppState extends AgentState {\n  inputs: {\n    location: string;\n    [key: string]: string;\n  };\n  result: string;\n  status: ResponseStatus;\n}\n\nexport default function Home() {\n  const { location, setLocation } = useGlobalContext();\n  const { appendMessage } = useCopilotChat();\n  const { isMobile } = useWindowSize();\n  const [direction, setDirection] = useState<\"horizontal\" | \"vertical\">(\n    \"horizontal\"\n  );\n\n  useEffect(() => {\n    setDirection(isMobile ? \"vertical\" : \"horizontal\");\n  }, [isMobile]);\n\n  const { state, name, running, setState } = useCoAgent<AppState>({\n    name: \"restaurant_finder_agent\",\n    initialState: {\n      inputs: {\n        location: location.city,\n      },\n      result: \"Final result will appear here\",\n    },\n  });\n\n  /**\n   * Appends a message to the chat with the given key and value\n   * This would be used for programatically triggering Crew\n   * @param key - The key of the input\n   * @param value - The value of the input\n   */\n  const setInput = async (key: keyof AppState[\"inputs\"], value: string) => {\n    setState({\n      ...state,\n      inputs: {\n        ...state.inputs,\n        [key as string]: value,\n      },\n    });\n    setTimeout(async () => {\n      await appendMessage(\n        new TextMessage({\n          content: `My ${String(key)} is ${value}`,\n          role: MessageRole.Developer,\n        })\n      );\n    }, 1000);\n  };\n\n  useInput({\n    onInputSubmit: (city) => {\n      setInput(\"location\", city);\n    },\n  });\n\n  // Update location.city if state.inputs.location changes\n  useEffect(() => {\n    if (state?.inputs?.location && state.inputs.location !== location.city) {\n      setLocation({ ...location, city: state.inputs.location });\n    }\n  }, [state?.inputs?.location, location, setLocation]);\n\n  useCoAgentStateRender({\n    name: \"restaurant_finder_agent\",\n    render: ({\n      state,\n      status,\n    }: {\n      state: AppState;\n      status: ResponseStatus;\n    }) => {\n      return (\n        <DefaultStateRenderer\n          state={state}\n          status={status}\n          defaultCollapsed={true}\n          SkeletonLoader={SkeletonItem}\n          StateItemRenderer={({ item }) => {\n            return (\n              <div key={item.id}>\n                <div className=\"text-xs\">\n                  <div className=\"opacity-70\">\n                    {\"tool\" in item ? item.tool : item.name}\n                  </div>\n                </div>\n\n                {\"thought\" in item && item.thought && (\n                  <div className=\"mt-0.5 text-xs opacity-80\">\n                    {item.thought}\n                  </div>\n                )}\n                {\"result\" in item &&\n                  item.result !== undefined &&\n                  item.result !== null && (\n                    <div className=\"mt-0.5 text-xs\">\n                      <FormattedContent\n                        content={formatContent(item.result)}\n                        showJsonLabel={false}\n                        isCollapsed={true}\n                      />\n                    </div>\n                  )}\n                {\"description\" in item && item.description && (\n                  <div className=\"mt-0.5 text-xs opacity-80\">\n                    {item.description}\n                  </div>\n                )}\n              </div>\n            );\n          }}\n        />\n      );\n    },\n  });\n\n  useCopilotAction({\n    name: \"crew_requesting_feedback\",\n    renderAndWaitForResponse({ status, args, respond }) {\n      const feedback = args as CrewFeedback;\n      return (\n        <DefaultResponseRenderer\n          response={{\n            id: feedback.id || String(Date.now()),\n            content: feedback.task_output || String(feedback),\n            metadata: feedback,\n          }}\n          onRespond={(input: string) => {\n            respond?.(input);\n          }}\n          status={status as ResponseStatus}\n          ContentRenderer={({ content }) => (\n            <div className=\"text-sm text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 rounded-md shadow-sm p-4 h-full overflow-y-auto whitespace-pre-line text-left\">\n              <ReactMarkdown>{content}</ReactMarkdown>\n            </div>\n          )}\n        />\n      );\n    },\n  });\n\n  const agentName = name.replace(/[^a-zA-Z0-9]/g, \" \");\n\n  return (\n    <div className=\"w-full h-full relative\">\n      {/* Status Badge */}\n      <AgentStatus running={running} state={{ status: state.status }} />\n\n      {/* Debug Viewer - Fixed at bottom right corner of page */}\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <DebugViewer state={state} />\n      </div>\n\n      <ResizablePanelGroup direction={direction} className=\"w-full h-full\">\n        <ResizablePanel defaultSize={60} minSize={30}>\n          <div\n            className=\"h-full relative overflow-y-auto\"\n            style={\n              {\n                \"--copilot-kit-primary-color\": \"#4F4F4F\",\n              } as CopilotKitCSSProperties\n            }\n          >\n            <CopilotChat\n              instructions={process.env.NEXT_PUBLIC_COPILOT_INSTRUCTIONS}\n              className=\"h-full flex flex-col\"\n              icons={{\n                spinnerIcon: (\n                  <span className=\"h-5 w-5 text-gray-500 animate-pulse\">\n                    ...\n                  </span>\n                ),\n              }}\n            />\n          </div>\n        </ResizablePanel>\n\n        <ResizableHandle withHandle />\n\n        <ResizablePanel defaultSize={40} minSize={25}>\n          <div className=\"h-full overflow-y-auto bg-gray-50 dark:bg-gray-900 p-3\">\n            <div className=\"flex flex-col h-full\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h1 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n                  {agentName}\n                </h1>\n              </div>\n\n              <div className=\"h-full\">\n                <div className=\"text-sm text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 rounded-md shadow-sm p-4 h-full overflow-y-auto whitespace-pre-line\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: formatText(state.result),\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </ResizablePanel>\n      </ResizablePanelGroup>\n    </div>\n  );\n}\n",
        "path": "ui/page.tsx",
        "language": "typescript"
      }
    ]
  }
}