{
  "agentic_chat": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA simple agentic chat flow.\n\"\"\"\n\nfrom crewai.flow.flow import Flow, start\nfrom litellm import completion\nfrom copilotkit.crewai import copilotkit_stream, CopilotKitState\n\nclass AgenticChatFlow(Flow[CopilotKitState]):\n\n    @start()\n    async def chat(self):\n        system_prompt = \"You are a helpful assistant.\"\n\n        # 1. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 1.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 1.2 Bind the available tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                ],\n\n                # 1.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 2. Append the message to the messages in state\n        self.state.messages.append(message)\n\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticChat: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"agentic_chat\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  const [background, setBackground] = useState<string>(\"#fefefe\");\n\n  useCopilotAction({\n    name: \"change_background\",\n    description:\n      \"Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.\",\n    parameters: [\n      {\n        name: \"background\",\n        type: \"string\",\n        description: \"The background. Prefer gradients.\",\n      },\n    ],\n    handler: ({ background }) => {\n      console.log(\"background\", background);\n      setBackground(background);\n    },\n  });\n\n  return (\n    <div\n      className=\"flex justify-center items-center h-full w-full\"\n      style={{ background }}\n    >\n      <div className=\"w-8/10 h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. Want to chat?\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AgenticChat;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      }
    ]
  },
  "agentic_generative_ui": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating agentic generative UI.\n\"\"\"\n\nimport json\nimport asyncio\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  CopilotKitState, \n  copilotkit_predict_state,\n  copilotkit_emit_state\n)\nfrom litellm import completion\nfrom pydantic import BaseModel\nfrom typing import Literal, List\n\n# This tool simulates performing a task on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nPERFORM_TASK_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_task_steps\",\n        \"description\": \"Make up 10 steps (only a couple of words per step) that are required for a task. The step should be in gerund form (i.e. Digging hole, opening door, ...)\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\n                                \"type\": \"string\",\n                                \"description\": \"The text of the step in gerund form\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"pending\"],\n                                \"description\": \"The status of the step, always 'pending'\"\n                            }\n                        },\n                        \"required\": [\"description\", \"status\"]\n                    },\n                    \"description\": \"An array of 10 step objects, each containing text and status\"\n                }\n            },\n            \"required\": [\"steps\"]\n        }\n    }\n}\n\nclass TaskStep(BaseModel):\n    description: str\n    status: Literal[\"pending\", \"completed\"]\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    Here we define the state of the agent\n\n    In this instance, we're inheriting from CopilotKitState, which will bring in\n    the CopilotKitState fields. We're also adding a custom field, `steps`,\n    which will be used to store the steps of the task.\n    \"\"\"\n    steps: List[TaskStep] = []\n\n\nclass AgenticGenerativeUIFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that uses the CopilotKit framework to create a chat agent.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n        system_prompt = \"\"\"\n        You are a helpful assistant assisting with any task. \n        When asked to do something, you MUST call the function `generate_task_steps`\n        that was provided to you.\n        If you called the function, you MUST NOT repeat the steps in your next response to the user.\n        Just give a very brief summary (one sentence) of what you did with some emojis. \n        Always say you actually did the steps, not merely generated them.\n        \"\"\"\n\n        # 1. Here we specify that we want to stream the tool call to generate_task_steps\n        #    to the frontend as state.\n        await copilotkit_predict_state({\n            \"steps\": {\n                \"tool\": \"generate_task_steps\",\n                \"tool_argument\": \"steps\"\n            }\n        })\n\n        # 2. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 2.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 2.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    PERFORM_TASK_TOOL\n                ],\n\n                # 2.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 3. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        # 4. Handle tool call\n        if message.get(\"tool_calls\"):\n            tool_call = message[\"tool_calls\"][0]\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"function\"][\"name\"]\n            tool_call_args = json.loads(tool_call[\"function\"][\"arguments\"])\n\n            if tool_call_name == \"generate_task_steps\":\n                # Convert each step in the JSON array to a TaskStep instance\n                self.state.steps = [TaskStep(**step) for step in tool_call_args[\"steps\"]]\n\n                # 4.1 Append the result to the messages in state\n                self.state.messages.append({\n                    \"role\": \"tool\",\n                    \"content\": \"Steps executed.\",\n                    \"tool_call_id\": tool_call_id\n                })\n                return \"route_simulate_task\"\n\n        # 5. If our tool was not called, return to the end route\n        return \"route_end\"\n\n    @router(\"route_simulate_task\")\n    async def simulate_task(self):\n        \"\"\"\n        Simulate the task.\n        \"\"\"\n        for step in self.state.steps:\n            # simulate executing the step\n            await asyncio.sleep(1)\n            step.status = \"completed\"\n            await copilotkit_emit_state(self.state)\n\n        return \"route_follow_up\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticGenerativeUI: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"agentic_generative_ui\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\ninterface AgentState {\n  steps: {\n    description: string;\n    status: \"pending\" | \"completed\";\n  }[];\n}\n\nconst Chat = () => {\n  useCoAgentStateRender<AgentState>({\n    name: \"agentic_generative_ui\",\n    render: ({ state }) => {\n      if (!state.steps || state.steps.length === 0) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex\">\n          <div className=\"bg-gray-100 rounded-lg w-[500px] p-4 text-black space-y-2\">\n            {state.steps.map((step, index) => {\n              if (step.status === \"completed\") {\n                return (\n                  <div key={index} className=\"text-sm\">\n                    ✓ {step.description}\n                  </div>\n                );\n              } else if (\n                step.status === \"pending\" &&\n                index === state.steps.findIndex((s) => s.status === \"pending\")\n              ) {\n                return (\n                  <div\n                    key={index}\n                    className=\"text-3xl font-bold text-slate-700\"\n                  >\n                    <Spinner />\n                    {step.description}\n                  </div>\n                );\n              } else {\n                return (\n                  <div key={index} className=\"text-sm\">\n                    <Spinner />\n                    {step.description}\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-screen w-screen\">\n      <div className=\"w-8/10 h-8/10\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. I can do anything, just ask!\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default AgenticGenerativeUI;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      }
    ]
  },
  "human_in_the_loop": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating agentic generative UI.\n\"\"\"\n\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  CopilotKitState, \n)\nfrom litellm import completion\nfrom pydantic import BaseModel\nfrom typing import Literal, List\n\n# This tool simulates performing a task on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nDEFINE_TASK_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_task_steps\",\n        \"description\": \"Make up 10 steps (only a couple of words per step) that are required for a task. The step should be in imperative form (i.e. Dig hole, Open door, ...)\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\n                                \"type\": \"string\",\n                                \"description\": \"The text of the step in imperative form\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"enabled\"],\n                                \"description\": \"The status of the step, always 'enabled'\"\n                            }\n                        },\n                        \"required\": [\"description\", \"status\"]\n                    },\n                    \"description\": \"An array of 10 step objects, each containing text and status\"\n                }\n            },\n            \"required\": [\"steps\"]\n        }\n    }\n}\n\nclass TaskStep(BaseModel):\n    description: str\n    status: Literal[\"enabled\", \"disabled\"]\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    Here we define the state of the agent\n\n    In this instance, we're inheriting from CopilotKitState, which will bring in\n    the CopilotKitState fields. We're also adding a custom field, `steps`,\n    which will be used to store the steps of the task.\n    \"\"\"\n    steps: List[TaskStep] = []\n\n\nclass HumanInTheLoopFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that uses the CopilotKit framework to create a chat agent.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n        system_prompt = \"\"\"\n        You are a helpful assistant that can perform any task.\n        You MUST call the `generate_task_steps` function when the user asks you to perform a task.\n        When the function `generate_task_steps` is called, the user will decide to enable or disable a step.\n        After the user has decided which steps to perform, provide a textual description of how you are performing the task.\n        If the user has disabled a step, you are not allowed to perform that step.\n        However, you should find a creative workaround to perform the task, and if an essential step is disabled, you can even use\n        some humor in the description of how you are performing the task.\n        Don't just repeat a list of steps, come up with a creative but short description (3 sentences max) of how you are performing the task.\n        \"\"\"\n\n        # 1. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 1.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 1.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    DEFINE_TASK_TOOL\n                ],\n\n                # 1.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 2. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        return \"route_end\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst HumanInTheLoop: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"human_in_the_loop\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  useCopilotAction({\n    name: \"generate_task_steps\",\n    parameters: [\n      {\n        name: \"steps\",\n        type: \"object[]\",\n        attributes: [\n          {\n            name: \"description\",\n            type: \"string\",\n          },\n          {\n            name: \"status\",\n            type: \"string\",\n            enum: [\"enabled\", \"disabled\", \"executing\"],\n          },\n        ],\n      },\n    ],\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      const [localSteps, setLocalSteps] = useState<\n        {\n          description: string;\n          status: \"disabled\" | \"enabled\" | \"executing\";\n        }[]\n      >([]);\n\n      useEffect(() => {\n        if (status === \"executing\" && localSteps.length === 0) {\n          setLocalSteps(args.steps);\n        }\n      }, [status, JSON.stringify(args.steps)]);\n\n      if (args.steps === undefined || args.steps.length === 0) {\n        return <></>;\n      }\n\n      const steps = localSteps.length > 0 ? localSteps : args.steps;\n\n      const handleCheckboxChange = (index: number) => {\n        setLocalSteps((prevSteps) =>\n          prevSteps.map((step, i) =>\n            i === index\n              ? {\n                  ...step,\n                  status: step.status === \"enabled\" ? \"disabled\" : \"enabled\",\n                }\n              : step\n          )\n        );\n      };\n\n      console.log(steps);\n\n      return (\n        <div className=\"flex flex-col gap-4 w-[500px] bg-gray-100 rounded-lg p-8 mb-4\">\n          <div className=\" text-black space-y-2\">\n            <h2 className=\"text-lg font-bold mb-4\">Select Steps</h2>\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-sm flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={step.status === \"enabled\"}\n                  onChange={() => handleCheckboxChange(index)}\n                  className=\"mr-2\"\n                />\n                <span\n                  className={\n                    step.status !== \"enabled\" && status != \"inProgress\"\n                      ? \"line-through\"\n                      : \"\"\n                  }\n                >\n                  {step.description}\n                </span>\n              </div>\n            ))}\n            {status === \"executing\" && (\n              <button\n                className=\"mt-4 bg-gradient-to-r from-purple-400 to-purple-600 text-white py-2 px-4 rounded cursor-pointer w-48 font-bold\"\n                onClick={() => {\n                  const selectedSteps = localSteps\n                    .filter((step) => step.status === \"enabled\")\n                    .map((step) => step.description);\n                  respond(\n                    \"The user selected the following steps: \" +\n                      selectedSteps.join(\", \")\n                  );\n                }}\n              >\n                ✨ Perform Steps\n              </button>\n            )}\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-screen w-screen\">\n      <div className=\"w-8/10 h-8/10\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. I can do anything, just ask!\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default HumanInTheLoop;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      }
    ]
  },
  "shared_state": {
    "files": [
      {
        "name": "README.md",
        "content": "# 🍳 Shared State Recipe Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **shared state** functionality - a powerful feature that enables bidirectional data flow between:\n1. **Frontend → Agent**: UI controls update the agent's context in real-time\n2. **Agent → Frontend**: The Copilot's recipe creations instantly update the UI components\n\nIt's like having a cooking buddy who not only listens to what you want but also updates your recipe card as you chat - no refresh needed! ✨\n\n## How to Interact\n\nMix and match any of these parameters (or none at all - it's up to you!):\n- **Skill Level**: Beginner to expert 👨‍🍳\n- **Cooking Time**: Quick meals or slow cooking ⏱️\n- **Special Preferences**: Dietary needs, flavor profiles, health goals 🥗\n- **Ingredients**: Items you want to include 🧅🥩🍄\n- **Instructions**: Any specific steps\n\nThen chat with your Copilot chef with prompts like:\n- \"I'm a beginner cook. Can you make me a quick dinner?\"\n- \"I need something spicy with chicken that takes under 30 minutes!\"\n\n## ✨ Shared State Magic in Action\n\n**What's happening technically:**\n- The UI and Copilot agent share the same state object (**Agent State = UI State**)\n- Changes from either side automatically update the other\n- Neither side needs to manually request updates from the other\n\n**What you'll see in this demo:**\n- Set cooking time to 20 minutes in the UI and watch the Copilot immediately respect your time constraint\n- Add ingredients through the UI and see them appear in your recipe\n- When the Copilot suggests new ingredients, watch them automatically appear in the UI ingredients list\n- Change your skill level and see how the Copilot adapts its instructions in real-time\n\nThis synchronized state creates a seamless experience where the agent always has your current preferences, and any updates to the recipe are instantly reflected in both places.\n\nThis shared state pattern can be applied to any application where you want your UI and Copilot to work together in perfect harmony!\n",
        "path": "README.md",
        "language": "markdown"
      },
      {
        "name": "agent.py",
        "content": "\"\"\"\nA demo of shared state between the agent and CopilotKit.\n\"\"\"\n\nimport json\nfrom enum import Enum\nfrom typing import List, Optional\nfrom litellm import completion\nfrom pydantic import BaseModel\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  copilotkit_predict_state,\n  CopilotKitState\n)\n\nclass SkillLevel(str, Enum):\n    \"\"\"\n    The level of skill required for the recipe.\n    \"\"\"\n    BEGINNER = \"Beginner\"\n    INTERMEDIATE = \"Intermediate\"\n    ADVANCED = \"Advanced\"\n\nclass SpecialPreferences(str, Enum):\n    \"\"\"\n    Special preferences for the recipe.\n    \"\"\"\n    HIGH_PROTEIN = \"High Protein\"\n    LOW_CARB = \"Low Carb\"\n    SPICY = \"Spicy\"\n    BUDGET_FRIENDLY = \"Budget-Friendly\"\n    ONE_POT_MEAL = \"One-Pot Meal\"\n    VEGETARIAN = \"Vegetarian\"\n    VEGAN = \"Vegan\"\n\nclass CookingTime(str, Enum):\n    \"\"\"\n    The cooking time of the recipe.\n    \"\"\"\n    FIVE_MIN = \"5 min\"\n    FIFTEEN_MIN = \"15 min\"\n    THIRTY_MIN = \"30 min\"\n    FORTY_FIVE_MIN = \"45 min\"\n    SIXTY_PLUS_MIN = \"60+ min\"\n\n\nGENERATE_RECIPE_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_recipe\",\n        \"description\": \" \".join(\"\"\"Generate or modify an existing recipe. \n        When creating a new recipe, specify all fields. \n        When modifying, only fill optional fields if they need changes; \n        otherwise, leave them empty.\"\"\".split()),\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"recipe\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"skill_level\": {\n                            \"type\": \"string\",\n                            \"enum\": [level.value for level in SkillLevel],\n                            \"description\": \"The skill level required for the recipe\"\n                        },\n                        \"special_preferences\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [preference.value for preference in SpecialPreferences]\n                            },\n                            \"description\": \"A list of special preferences for the recipe\"\n                        },\n                        \"cooking_time\": {\n                            \"type\": \"string\",\n                            \"enum\": [time.value for time in CookingTime],\n                            \"description\": \"The cooking time of the recipe\"\n                        },\n                        \"ingredients\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of ingredients in the recipe\"\n                        },\n                        \"instructions\": {\n                            \"type\": \"string\",\n                            \"description\": \"Instructions for the recipe\"\n                        }\n                    },\n                }\n            },\n            \"required\": [\"recipe\"]\n        }\n    }\n}\n\nclass Recipe(BaseModel):\n    \"\"\"\n    A recipe.\n    \"\"\"\n    skill_level: SkillLevel\n    special_preferences: List[SpecialPreferences]\n    cooking_time: CookingTime\n    ingredients: str\n    instructions: str\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the recipe.\n    \"\"\"\n    recipe: Optional[Recipe] = None\n\nclass SharedStateFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that demonstrates shared state between the agent and CopilotKit.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n \n        system_prompt = f\"\"\"You are a helpful assistant for creating recipes. \n        This is the current state of the recipe: {json.dumps(self.state.model_dump_json(), indent=2)}\n        You can modify the recipe by calling the generate_recipe tool.\n        If you have just created or modified the recipe, just answer in one sentence what you did.\n        \"\"\"\n\n        # 1. Here we specify that we want to stream the tool call to generate_recipe\n        #    to the frontend as state.\n        await copilotkit_predict_state({\n            \"recipe\": {\n                \"tool_name\": \"generate_recipe\",\n                \"tool_argument\": \"recipe\"\n            }\n        })\n\n        # 2. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 2.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 2.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    GENERATE_RECIPE_TOOL\n                ],\n\n                # 2.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 3. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        # 4. Handle tool call\n        if message.get(\"tool_calls\"):\n            tool_call = message[\"tool_calls\"][0]\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"function\"][\"name\"]\n            tool_call_args = json.loads(tool_call[\"function\"][\"arguments\"])\n\n            if tool_call_name == \"generate_recipe\":\n                for key, value in tool_call_args[\"recipe\"].items():\n                    setattr(self.state.recipe, key, value)\n\n                # 4.1 Append the result to the messages in state\n                self.state.messages.append({\n                    \"role\": \"tool\",\n                    \"content\": \"Recipe generated.\",\n                    \"tool_call_id\": tool_call_id\n                })\n                return \"route_follow_up\"\n\n        # 5. If our tool was not called, return to the end route\n        return \"route_end\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport { CopilotKit, useCoAgent, useCopilotChat } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nenum SkillLevel {\n  BEGINNER = \"Beginner\",\n  INTERMEDIATE = \"Intermediate\",\n  ADVANCED = \"Advanced\",\n}\n\nenum SpecialPreferences {\n  HighProtein = \"High Protein\",\n  LowCarb = \"Low Carb\",\n  Spicy = \"Spicy\",\n  BudgetFriendly = \"Budget-Friendly\",\n  OnePotMeal = \"One-Pot Meal\",\n  Vegetarian = \"Vegetarian\",\n  Vegan = \"Vegan\",\n}\n\nenum CookingTime {\n  FiveMin = \"5 min\",\n  FifteenMin = \"15 min\",\n  ThirtyMin = \"30 min\",\n  FortyFiveMin = \"45 min\",\n  SixtyPlusMin = \"60+ min\",\n}\n\nconst cookingTimeValues = [\n  { label: CookingTime.FiveMin, value: 0 },\n  { label: CookingTime.FifteenMin, value: 1 },\n  { label: CookingTime.ThirtyMin, value: 2 },\n  { label: CookingTime.FortyFiveMin, value: 3 },\n  { label: CookingTime.SixtyPlusMin, value: 4 },\n];\n\nexport default function SharedState() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"shared_state\"\n    >\n      <div\n        className=\"min-h-screen w-full flex items-center justify-center\"\n        style={\n          {\n            backgroundImage: \"url('./shared_state_background.png')\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            backgroundRepeat: \"no-repeat\",\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as React.CSSProperties\n        }\n      >\n        <Recipe />\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"AI Recipe Assistant\",\n            initial: \"Hi 👋 How can I help with your recipe?\",\n          }}\n          clickOutsideToClose={false}\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n\ninterface Recipe {\n  skill_level: SkillLevel;\n  special_preferences: SpecialPreferences[];\n  cooking_time: CookingTime;\n  ingredients: string;\n  instructions: string;\n}\n\ninterface RecipeAgentState {\n  recipe: Recipe;\n}\n\nconst INITIAL_STATE: RecipeAgentState = {\n  recipe: {\n    skill_level: SkillLevel.BEGINNER,\n    special_preferences: [],\n    cooking_time: CookingTime.FifteenMin,\n    ingredients: \"\",\n    instructions: \"\",\n  },\n};\n\nfunction Recipe() {\n  const { state: agentState, setState: setAgentState } =\n    useCoAgent<RecipeAgentState>({\n      name: \"shared_state\",\n      initialState: INITIAL_STATE,\n    });\n\n  const [recipe, setRecipe] = useState(INITIAL_STATE.recipe);\n  const { appendMessage, isLoading } = useCopilotChat();\n\n  const updateRecipe = (partialRecipe: Partial<Recipe>) => {\n    setAgentState({\n      ...agentState,\n      recipe: {\n        ...recipe,\n        ...partialRecipe,\n      },\n    });\n    setRecipe({\n      ...recipe,\n      ...partialRecipe,\n    });\n  };\n\n  const newRecipeState = { ...recipe };\n  const newChangedKeys = [];\n  const changedKeysRef = useRef<string[]>([]);\n\n  for (const key in recipe) {\n    if (\n      (agentState.recipe as any)[key] !== undefined &&\n      (agentState.recipe as any)[key] !== null\n    ) {\n      let agentValue = (agentState.recipe as any)[key];\n      const recipeValue = (recipe as any)[key];\n\n      if (Array.isArray(agentValue) && Array.isArray(recipeValue)) {\n        agentValue.sort();\n      }\n\n      // Check if agentValue is a string and replace \\n with actual newlines\n      if (typeof agentValue === \"string\") {\n        agentValue = agentValue.replace(/\\\\n/g, \"\\n\");\n      }\n\n      if (JSON.stringify(agentValue) !== JSON.stringify(recipeValue)) {\n        (newRecipeState as any)[key] = agentValue;\n        newChangedKeys.push(key);\n      }\n    }\n  }\n\n  if (newChangedKeys.length > 0) {\n    changedKeysRef.current = newChangedKeys;\n  } else if (!isLoading) {\n    changedKeysRef.current = [];\n  }\n\n  useEffect(() => {\n    setRecipe(newRecipeState);\n  }, [JSON.stringify(newRecipeState)]);\n\n  const handleSkillLevelChange = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    updateRecipe({\n      skill_level: event.target.value as SkillLevel,\n    });\n  };\n\n  const handlePreferenceChange = (\n    preference: SpecialPreferences,\n    checked: boolean\n  ) => {\n    if (checked) {\n      updateRecipe({\n        special_preferences: [\n          ...agentState.recipe.special_preferences,\n          preference,\n        ],\n      });\n    } else {\n      updateRecipe({\n        special_preferences: agentState.recipe.special_preferences.filter(\n          (p) => p !== preference\n        ),\n      });\n    }\n  };\n\n  const handleCookingTimeChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    updateRecipe({\n      cooking_time: cookingTimeValues[Number(event.target.value)].label,\n    });\n  };\n\n  const handleIngredientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    updateRecipe({\n      ingredients: event.target.value,\n    });\n  };\n\n  const handleInstructionsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    updateRecipe({\n      instructions: event.target.value,\n    });\n  };\n\n  return (\n    <form\n      className=\"w-full max-w-lg p-6 rounded shadow-md\"\n      style={{\n        backgroundColor: \"rgba(255, 255, 255, 0.9)\", // Semi-transparent white\n        backdropFilter: \"blur(10px)\", // Apply blur for frosted effect\n        WebkitBackdropFilter: \"blur(10px)\", // For Safari support\n        boxShadow: \"0 4px 30px rgba(0, 0, 0, 0.1)\", // Subtle shadow for depth\n      }}\n    >\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"skill_level\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"skillLevel\"\n        >\n          Skill Level\n        </label>\n        <select\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          id=\"skillLevel\"\n          value={recipe.skill_level}\n          onChange={handleSkillLevelChange}\n        >\n          {Object.values(SkillLevel).map((level) => (\n            <option key={level} value={level}>\n              {level}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"cooking_time\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"cookingTime\"\n        >\n          Cooking Time: {recipe.cooking_time}\n        </label>\n        <input\n          type=\"range\"\n          id=\"cookingTime\"\n          min=\"0\"\n          max={cookingTimeValues.length - 1}\n          value={cookingTimeValues.findIndex(\n            (value) => value.label === recipe.cooking_time\n          )}\n          onChange={handleCookingTimeChange}\n          className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"special_preferences\") && <Ping />}\n        <label className=\"block text-gray-700 text-sm font-bold mb-4\">\n          Special Preferences:\n        </label>\n        <div className=\"flex flex-wrap mt-2\">\n          {Object.values(SpecialPreferences).map((preference) => (\n            <label\n              key={preference}\n              className=\"flex items-center mr-4 mb-2 whitespace-nowrap uppercase\"\n              style={{ fontSize: \"10px\", fontWeight: \"bold\" }}\n            >\n              <input\n                type=\"checkbox\"\n                checked={recipe.special_preferences.includes(preference)}\n                onChange={(e) =>\n                  handlePreferenceChange(preference, e.target.checked)\n                }\n                className=\"mr-1\"\n              />\n              {preference}\n            </label>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"ingredients\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"ingredients\"\n        >\n          Ingredients:\n        </label>\n        <textarea\n          id=\"ingredients\"\n          value={recipe.ingredients}\n          onChange={handleIngredientsChange}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          rows={4}\n          placeholder=\"Enter ingredients here...\"\n        />\n      </div>\n\n      <div className=\"mb-4 relative\">\n        {changedKeysRef.current.includes(\"instructions\") && <Ping />}\n        <label\n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n          htmlFor=\"instructions\"\n        >\n          Instructions:\n        </label>\n        <textarea\n          id=\"instructions\"\n          value={recipe.instructions}\n          onChange={handleInstructionsChange}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          rows={6}\n          placeholder=\"Enter instructions here...\"\n        />\n      </div>\n\n      <div className=\"flex items-center justify-end mt-2\">\n        <button\n          className={`${\n            isLoading\n              ? \"bg-gray-400 cursor-not-allowed\"\n              : \"bg-black hover:bg-gray-800\"\n          } text-white font-base py-2 px-4 rounded focus:outline-none focus:shadow-outline`}\n          type=\"button\"\n          onClick={() => {\n            if (!isLoading) {\n              appendMessage(\n                new TextMessage({\n                  content: \"Improve the recipe\",\n                  role: Role.User,\n                })\n              );\n            }\n          }}\n          disabled={isLoading}\n        >\n          {isLoading ? \"Please Wait...\" : \"Improve with AI\"}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction Ping() {\n  return (\n    <span className=\"absolute flex size-3 top-0 right-0\">\n      <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-sky-400 opacity-75\"></span>\n      <span className=\"relative inline-flex size-3 rounded-full bg-sky-500\"></span>\n    </span>\n  );\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n",
        "path": "style.css",
        "language": "css"
      }
    ]
  },
  "predictive_state_updates": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA demo of predictive state updates.\n\"\"\"\n\nimport json\nimport uuid\nfrom typing import Optional\nfrom litellm import completion\nfrom crewai.flow.flow import Flow, start, router, listen\nfrom copilotkit.crewai import (\n  copilotkit_stream, \n  copilotkit_predict_state,\n  CopilotKitState\n)\n\nWRITE_DOCUMENT_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"write_document\",\n        \"description\": \" \".join(\"\"\"\n            Write a document. Use markdown formatting to format the document.\n            It's good to format the document extensively so it's easy to read.\n            You can use all kinds of markdown.\n            However, do not use italic or strike-through formatting, it's reserved for another purpose.\n            You MUST write the full document, even when changing only a few words.\n            When making edits to the document, try to make them minimal - do not change every word.\n            Keep stories SHORT!\n            \"\"\".split()),\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"document\": {\n                    \"type\": \"string\",\n                    \"description\": \"The document to write\"\n                },\n            },\n        }\n    }\n}\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the agent.\n    \"\"\"\n    document: Optional[str] = None\n\nclass PredictiveStateUpdatesFlow(Flow[AgentState]):\n    \"\"\"\n    This is a sample flow that demonstrates predictive state updates.\n    \"\"\"\n\n    @start()\n    @listen(\"route_follow_up\")\n    async def start_flow(self):\n        \"\"\"\n        This is the entry point for the flow.\n        \"\"\"\n\n    @router(start_flow)\n    async def chat(self):\n        \"\"\"\n        Standard chat node.\n        \"\"\"\n        system_prompt = f\"\"\"\n        You are a helpful assistant for writing documents. \n        To write the document, you MUST use the write_document tool.\n        You MUST write the full document, even when changing only a few words.\n        When you wrote the document, DO NOT repeat it as a message. \n        Just briefly summarize the changes you made. 2 sentences max.\n        This is the current state of the document: ----\\n {self.state.document}\\n-----\n        \"\"\"\n\n        # 1. Here we specify that we want to stream the tool call to write_document\n        #    to the frontend as state.\n        await copilotkit_predict_state({\n            \"document\": {\n                \"tool_name\": \"write_document\",\n                \"tool_argument\": \"document\"\n            }\n        })\n\n        # 2. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 2.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 2.2 Bind the tools to the model\n                tools=[\n                    *self.state.copilotkit.actions,\n                    WRITE_DOCUMENT_TOOL\n                ],\n\n                # 2.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 3. Append the message to the messages in state\n        self.state.messages.append(message)\n\n        # 4. Handle tool call\n        if message.get(\"tool_calls\"):\n            tool_call = message[\"tool_calls\"][0]\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"function\"][\"name\"]\n            tool_call_args = json.loads(tool_call[\"function\"][\"arguments\"])\n\n            if tool_call_name == \"write_document\":\n                self.state.document = tool_call_args[\"document\"]\n\n                # 4.1 Append the result to the messages in state\n                self.state.messages.append({\n                    \"role\": \"tool\",\n                    \"content\": \"Document written.\",\n                    \"tool_call_id\": tool_call_id\n                })\n\n                # 4.2 Append a tool call to confirm changes\n                self.state.messages.append({\n                    \"role\": \"assistant\",\n                    \"content\": \"\",\n                    \"tool_calls\": [{\n                        \"id\": str(uuid.uuid4()),\n                        \"function\": {\n                            \"name\": \"confirm_changes\",\n                            \"arguments\": \"{}\"\n                        }\n                    }]\n                })\n\n                return \"route_end\"\n\n        # 5. If our tool was not called, return to the end route\n        return \"route_end\"\n\n    @listen(\"route_end\")\n    async def end(self):\n        \"\"\"\n        End the flow.\n        \"\"\"\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nimport MarkdownIt from \"markdown-it\";\n\nimport { diffWords } from \"diff\";\nimport { useEditor, EditorContent } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport { useEffect, useState } from \"react\";\nimport {\n  CopilotKit,\n  useCoAgent,\n  useCopilotAction,\n  useCopilotChat,\n} from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\n\nconst extensions = [StarterKit];\n\nexport default function PredictiveStateUpdates() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"predictive_state_updates\"\n    >\n      <div\n        className=\"min-h-screen w-full\"\n        style={\n          {\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as React.CSSProperties\n        }\n      >\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"AI Document Editor\",\n            initial: \"Hi 👋 How can I help with your document?\",\n          }}\n          clickOutsideToClose={false}\n        >\n          <DocumentEditor />\n        </CopilotSidebar>\n      </div>\n    </CopilotKit>\n  );\n}\n\ninterface AgentState {\n  document: string;\n}\n\nconst DocumentEditor = () => {\n  const editor = useEditor({\n    extensions,\n    immediatelyRender: false,\n    editorProps: {\n      attributes: { class: \"min-h-screen p-10\" },\n    },\n  });\n  const [placeholderVisible, setPlaceholderVisible] = useState(false);\n  const [currentDocument, setCurrentDocument] = useState(\"\");\n  const { isLoading } = useCopilotChat();\n\n  const {\n    state: agentState,\n    setState: setAgentState,\n    nodeName,\n  } = useCoAgent<AgentState>({\n    name: \"predictive_state_updates\",\n    initialState: {\n      document: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setCurrentDocument(editor?.getText() || \"\");\n    }\n    editor?.setEditable(!isLoading);\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (nodeName == \"end\") {\n      // set the text one final time when loading is done\n      if (\n        currentDocument.trim().length > 0 &&\n        currentDocument !== agentState?.document\n      ) {\n        const newDocument = agentState?.document || \"\";\n        const diff = diffPartialText(currentDocument, newDocument, true);\n        const markdown = fromMarkdown(diff);\n        editor?.commands.setContent(markdown);\n      }\n    }\n  }, [nodeName]);\n\n  useEffect(() => {\n    if (isLoading) {\n      if (currentDocument.trim().length > 0) {\n        const newDocument = agentState?.document || \"\";\n        const diff = diffPartialText(currentDocument, newDocument);\n        const markdown = fromMarkdown(diff);\n        editor?.commands.setContent(markdown);\n      } else {\n        const markdown = fromMarkdown(agentState?.document || \"\");\n        editor?.commands.setContent(markdown);\n      }\n    }\n  }, [agentState?.document]);\n\n  const text = editor?.getText() || \"\";\n\n  useEffect(() => {\n    setPlaceholderVisible(text.length === 0);\n\n    if (!isLoading) {\n      setCurrentDocument(text);\n      setAgentState({\n        document: text,\n      });\n    }\n  }, [text]);\n\n  useCopilotAction({\n    name: \"confirm_changes\",\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      const [accepted, setAccepted] = useState<boolean | null>(null);\n      return (\n        <div className=\"bg-white p-6 rounded shadow-lg border border-gray-200 mt-5 mb-5\">\n          <h2 className=\"text-lg font-bold mb-4\">Confirm Changes</h2>\n          <p className=\"mb-6\">Do you want to accept the changes?</p>\n          {accepted === null && (\n            <div className=\"flex justify-end space-x-4\">\n              <button\n                className={`bg-gray-200 text-black py-2 px-4 rounded disabled:opacity-50 ${\n                  status === \"executing\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                disabled={status !== \"executing\"}\n                onClick={() => {\n                  if (respond) {\n                    setAccepted(false);\n                    editor?.commands.setContent(fromMarkdown(currentDocument));\n                    setAgentState({\n                      document: currentDocument,\n                    });\n                    respond({ accepted: false });\n                  }\n                }}\n              >\n                Reject\n              </button>\n              <button\n                className={`bg-black text-white py-2 px-4 rounded disabled:opacity-50 ${\n                  status === \"executing\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                disabled={status !== \"executing\"}\n                onClick={() => {\n                  if (respond) {\n                    setAccepted(true);\n                    editor?.commands.setContent(\n                      fromMarkdown(agentState?.document || \"\")\n                    );\n                    setCurrentDocument(agentState?.document || \"\");\n                    setAgentState({\n                      document: agentState?.document || \"\",\n                    });\n                    respond({ accepted: true });\n                  }\n                }}\n              >\n                Confirm\n              </button>\n            </div>\n          )}\n          {accepted !== null && (\n            <div className=\"flex justify-end\">\n              <div className=\"mt-4 bg-gray-200 text-black py-2 px-4 rounded inline-block\">\n                {accepted ? \"✓ Accepted\" : \"✗ Rejected\"}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"relative min-h-screen w-full\">\n      {placeholderVisible && (\n        <div className=\"absolute top-6 left-6 m-4 pointer-events-none text-gray-400\">\n          Your content goes here...\n        </div>\n      )}\n      <EditorContent editor={editor} />\n    </div>\n  );\n};\n\nfunction fromMarkdown(text: string) {\n  const md = new MarkdownIt({\n    typographer: true,\n    html: true,\n  });\n\n  return md.render(text);\n}\n\nfunction diffPartialText(\n  oldText: string,\n  newText: string,\n  isComplete: boolean = false\n) {\n  let oldTextToCompare = oldText;\n  if (oldText.length > newText.length && !isComplete) {\n    // make oldText shorter\n    oldTextToCompare = oldText.slice(0, newText.length);\n  }\n\n  const changes = diffWords(oldTextToCompare, newText);\n\n  let result = \"\";\n  changes.forEach((part) => {\n    if (part.added) {\n      result += `<em>${part.value}</em>`;\n    } else if (part.removed) {\n      result += `<s>${part.value}</s>`;\n    } else {\n      result += part.value;\n    }\n  });\n\n  if (oldText.length > newText.length && !isComplete) {\n    result += oldText.slice(newText.length);\n  }\n\n  return result;\n}\n\nfunction isAlpha(text: string) {\n  return /[a-zA-Z\\u00C0-\\u017F]/.test(text.trim());\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": "/* Basic editor styles */\n.tiptap-container {\n  height: 100vh; /* Full viewport height */\n  width: 100vw; /* Full viewport width */\n  display: flex;\n  flex-direction: column;\n}\n\n.tiptap {\n  flex: 1; /* Take up remaining space */\n  overflow: auto; /* Allow scrolling if content overflows */\n}\n\n.tiptap :first-child {\n  margin-top: 0;\n}\n\n/* List styles */\n.tiptap ul,\n.tiptap ol {\n  padding: 0 1rem;\n  margin: 1.25rem 1rem 1.25rem 0.4rem;\n}\n\n.tiptap ul li p,\n.tiptap ol li p {\n  margin-top: 0.25em;\n  margin-bottom: 0.25em;\n}\n\n/* Heading styles */\n.tiptap h1,\n.tiptap h2,\n.tiptap h3,\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  line-height: 1.1;\n  margin-top: 2.5rem;\n  text-wrap: pretty;\n  font-weight: bold;\n}\n\n.tiptap h1,\n.tiptap h2,\n.tiptap h3,\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  margin-top: 3.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.tiptap p {\n  margin-bottom: 1rem;\n}\n\n.tiptap h1 {\n  font-size: 1.4rem;\n}\n\n.tiptap h2 {\n  font-size: 1.2rem;\n}\n\n.tiptap h3 {\n  font-size: 1.1rem;\n}\n\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  font-size: 1rem;\n}\n\n/* Code and preformatted text styles */\n.tiptap code {\n  background-color: var(--purple-light);\n  border-radius: 0.4rem;\n  color: var(--black);\n  font-size: 0.85rem;\n  padding: 0.25em 0.3em;\n}\n\n.tiptap pre {\n  background: var(--black);\n  border-radius: 0.5rem;\n  color: var(--white);\n  font-family: \"JetBrainsMono\", monospace;\n  margin: 1.5rem 0;\n  padding: 0.75rem 1rem;\n}\n\n.tiptap pre code {\n  background: none;\n  color: inherit;\n  font-size: 0.8rem;\n  padding: 0;\n}\n\n.tiptap blockquote {\n  border-left: 3px solid var(--gray-3);\n  margin: 1.5rem 0;\n  padding-left: 1rem;\n}\n\n.tiptap hr {\n  border: none;\n  border-top: 1px solid var(--gray-2);\n  margin: 2rem 0;\n}\n\n.tiptap s {\n  background-color: #f9818150;\n  padding: 2px;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.7);\n}\n\n.tiptap em {\n  background-color: #b2f2bb;\n  padding: 2px;\n  font-weight: bold;\n  font-style: normal;\n}\n\n.copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n",
        "path": "style.css",
        "language": "css"
      }
    ]
  },
  "tool_based_generative_ui": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating tool-based generative UI.\n\"\"\"\n\nfrom crewai.flow.flow import Flow, start\nfrom copilotkit.crewai import copilotkit_stream, CopilotKitState\nfrom litellm import completion\n\n\n# This tool generates a haiku on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nGENERATE_HAIKU_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_haiku\",\n        \"description\": \"Generate a haiku in Japanese and its English translation\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"japanese\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"An array of three lines of the haiku in Japanese\"\n                },\n                \"english\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"An array of three lines of the haiku in English\"\n                }\n            },\n            \"required\": [\"japanese\", \"english\"]\n        }\n    }\n}\n\n\nclass ToolBasedGenerativeUIFlow(Flow[CopilotKitState]):\n    \"\"\"\n    A flow that demonstrates tool-based generative UI.\n    \"\"\"\n\n    @start()\n    async def chat(self):\n        \"\"\"\n        The main function handling chat and tool calls.\n        \"\"\"\n        system_prompt = \"You assist the user in generating a haiku.\"\n\n\n        # 1. Run the model and stream the response\n        #    Note: In order to stream the response, wrap the completion call in\n        #    copilotkit_stream and set stream=True.\n        response = await copilotkit_stream(\n            completion(\n\n                # 1.1 Specify the model to use\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": system_prompt\n                    },\n                    *self.state.messages\n                ],\n\n                # 1.2 Bind the available tools to the model\n                tools=[ GENERATE_HAIKU_TOOL ],\n\n                # 1.3 Disable parallel tool calls to avoid race conditions,\n                #     enable this for faster performance if you want to manage\n                #     the complexity of running tool calls in parallel.\n                parallel_tool_calls=False,\n                stream=True\n            )\n        )\n\n        message = response.choices[0].message\n\n        # 2. Append the message to the messages in state\n        self.state.messages.append(message)\n\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nexport default function AgenticChat() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"tool_based_generative_ui\"\n    >\n      <div\n        className=\"min-h-full w-full flex items-center justify-center\"\n        style={\n          {\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as CopilotKitCSSProperties\n        }\n      >\n        <Haiku />\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"Haiku Generator\",\n            initial: \"I'm a haiku generator 👋. How can I help you?\",\n          }}\n          clickOutsideToClose={false}\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n\nfunction Haiku() {\n  const [haiku, setHaiku] = useState<{\n    japanese: string[];\n    english: string[];\n  }>({\n    japanese: [\"仮の句よ\", \"まっさらながら\", \"花を呼ぶ\"],\n    english: [\n      \"A placeholder verse—\",\n      \"even in a blank canvas,\",\n      \"it beckons flowers.\",\n    ],\n  });\n\n  useCopilotAction({\n    name: \"generate_haiku\",\n    parameters: [\n      {\n        name: \"japanese\",\n        type: \"string[]\",\n      },\n      {\n        name: \"english\",\n        type: \"string[]\",\n      },\n    ],\n    followUp: false,\n    handler: async () => {\n      return \"Haiku generated.\";\n    },\n    render: ({ args: generatedHaiku, result, status }) => {\n      const [isApplied, setIsApplied] = useState(false);\n      if (\n        !generatedHaiku ||\n        !generatedHaiku.japanese ||\n        !generatedHaiku.japanese.length\n      ) {\n        return <></>;\n      }\n\n      return (\n        <div className=\"text-left rounded-md p-4 mt-4 mb-4 flex flex-col bg-gray-100\">\n          <div\n            className={\n              status === \"complete\" ? \"border-b border-gray-300 mb-4\" : \"\"\n            }\n          >\n            {generatedHaiku?.japanese?.map((line, index) => (\n              <div className=\"flex items-center gap-3 mb-2 pb-2\" key={index}>\n                <p className=\"text-lg font-bold\">{line}</p>\n                <p className=\"text-sm font-light\">\n                  {generatedHaiku?.english?.[index]}\n                </p>\n              </div>\n            ))}\n          </div>\n          {status === \"complete\" && (\n            <button\n              onClick={() => {\n                setHaiku(generatedHaiku);\n                setIsApplied(true);\n              }}\n              className=\"ml-auto px-3 py-1 bg-white text-black text-sm rounded cursor-pointer font-sm border \"\n            >\n              {isApplied ? \"Applied ✓\" : \"Apply\"}\n            </button>\n          )}\n        </div>\n      );\n    },\n  });\n  return (\n    <>\n      <div className=\"text-left\">\n        {haiku?.japanese.map((line, index) => (\n          <div className=\"flex items-center gap-6 mb-2\" key={index}>\n            <p className=\"text-4xl font-bold text-gray-500\">{line}</p>\n            <p className=\"text-base font-light\">{haiku?.english?.[index]}</p>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n}\n",
        "path": "style.css",
        "language": "css"
      }
    ]
  }
}