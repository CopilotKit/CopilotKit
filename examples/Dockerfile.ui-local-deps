# syntax=docker/dockerfile:1-labs

FROM node:21-slim AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
RUN pnpm i -g turbo

# Production Stage 
FROM base AS production
ARG APP_DIR
COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 /lambda-adapter /opt/extensions/lambda-adapter
WORKDIR /app/demo

COPY ${APP_DIR}/package.json ${APP_DIR}/pnpm-lock.yaml ./
RUN pnpm i --frozen-lockfile

COPY ${APP_DIR}/.next/standalone ./
COPY ${APP_DIR}/.next/static ./.next/static

WORKDIR /app/monorepo

COPY CopilotKit/package.json ./CopilotKit/
COPY CopilotKit/pnpm-lock.yaml ./CopilotKit/
COPY CopilotKit/pnpm-workspace.yaml ./CopilotKit/

COPY --parents CopilotKit/packages/**/package.json ./
COPY --parents CopilotKit/packages/**/pnpm-lock.yaml ./
COPY --parents CopilotKit/packages/**/dist ./

WORKDIR /app/demo

ARG PACKAGES_DIR="/app/monorepo/CopilotKit/packages"
RUN pnpm add ${PACKAGES_DIR}/react-core && \
    pnpm add ${PACKAGES_DIR}/react-ui && \
    pnpm add ${PACKAGES_DIR}/react-textarea && \
    pnpm add ${PACKAGES_DIR}/runtime && \
    pnpm add ${PACKAGES_DIR}/runtime-client-gql && \
    pnpm add ${PACKAGES_DIR}/shared
    
# WORKDIR /app/${APP_DIR}/.next/standalone
# RUN npm i --omit=dev

# Set the environment variables (if needed)
ENV NODE_ENV=production
EXPOSE 3000
CMD ["node", "server.js"]