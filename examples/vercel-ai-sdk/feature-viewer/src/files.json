{
  "basic_chat": {
    "files": [
      {
        "name": "route.ts",
        "content": "import { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport { experimental_createMCPClient } from \"ai\";\nimport { copilotRuntimeNextJSAppRouterEndpoint } from \"@copilotkit/runtime\";\nimport { NextRequest } from \"next/server\";\n\nconst serviceAdapter = new OpenAIAdapter();\n\nconst runtime = new CopilotRuntime({\n  actions: [\n    {\n      name: \"getWeather\",\n      description: \"Get the current weather for a location\",\n      parameters: [\n        {\n          name: \"location\",\n          type: \"string\",\n          description: \"The city and state, e.g. San Francisco, CA\",\n          required: true,\n        },\n      ],\n      handler: async ({ location }) => {\n        // Simulate weather API call\n        const weatherData = {\n          location,\n          temperature: Math.floor(Math.random() * 30) + 50,\n          condition: [\"sunny\", \"cloudy\", \"rainy\", \"snowy\"][Math.floor(Math.random() * 4)],\n          humidity: Math.floor(Math.random() * 40) + 30,\n        };\n        \n        return `The weather in ${weatherData.location} is ${weatherData.condition} with a temperature of ${weatherData.temperature}Â°F and ${weatherData.humidity}% humidity.`;\n      },\n    },\n  ],\n  mcpServers: [\n    { endpoint: \"https://your-mcp-server.com/sse\" }\n  ],\n  async createMCPClient(config) {\n    return await experimental_createMCPClient({\n      transport: {\n        type: \"sse\",\n        url: config.endpoint,\n        headers: config.apiKey\n          ? { Authorization: `Bearer ${config.apiKey}` }\n          : undefined,\n      },\n    });\n  }\n});\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: \"/api/copilotkit\",\n  });\n\n  return handleRequest(req);\n};",
        "path": "src/app/api/copilotkit/route.ts",
        "language": "typescript",
        "type": "file"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\n\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nexport default function Home() {\n  return (\n    <CopilotKit publicApiKey=\"<replace_with_your_own>\">\n      <div className=\"flex h-screen bg-gray-50\">\n        <div className=\"flex-1 flex flex-col\">\n          <header className=\"bg-white shadow-sm border-b px-6 py-4\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Vercel AI SDK Basic Chat\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              A simple chat application with CopilotKit and Vercel AI SDK\n            </p>\n          </header>\n          <div className=\"flex-1 p-6\">\n            <CopilotChat\n              instructions=\"You are a helpful AI assistant with access to weather information. You can help users get weather updates for any location.\"\n              className=\"h-full rounded-lg border bg-white shadow-sm\"\n            />\n          </div>\n        </div>\n      </div>\n    </CopilotKit>\n  );\n}",
        "path": "src/app/page.tsx",
        "language": "typescript",
        "type": "file"
      }
    ]
  },
  "advanced_workflow": {
    "files": [
      {
        "name": "route.ts",
        "content": "import { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport { experimental_createMCPClient } from \"ai\";\nimport { copilotRuntimeNextJSAppRouterEndpoint } from \"@copilotkit/runtime\";\nimport { NextRequest } from \"next/server\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst serviceAdapter = new OpenAIAdapter();\n\n// In-memory workflow state (in production, use a database)\nconst workflowState = new Map<string, any>();\n\nconst runtime = new CopilotRuntime({\n  actions: [\n    {\n      name: \"startWorkflow\",\n      description: \"Start a new multi-step workflow\",\n      parameters: [\n        {\n          name: \"workflowType\",\n          type: \"string\",\n          description: \"Type of workflow to start\",\n          required: true,\n          enum: [\"dataAnalysis\", \"contentGeneration\", \"research\", \"automation\"],\n        },\n        {\n          name: \"parameters\",\n          type: \"object\",\n          description: \"Workflow-specific parameters\",\n          required: true,\n        },\n      ],\n      handler: async ({ workflowType, parameters }) => {\n        const workflowId = uuidv4();\n        const workflow = {\n          id: workflowId,\n          type: workflowType,\n          parameters,\n          status: \"started\",\n          currentStep: 0,\n          totalSteps: 0,\n          steps: [],\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n        \n        workflowState.set(workflowId, workflow);\n        \n        return {\n          workflowId,\n          message: `Started ${workflowType} workflow with ID: ${workflowId}`,\n          status: \"started\",\n        };\n      },\n    },\n    {\n      name: \"executeStep\",\n      description: \"Execute a step in the workflow\",\n      parameters: [\n        {\n          name: \"workflowId\",\n          type: \"string\",\n          description: \"ID of the workflow\",\n          required: true,\n        },\n        {\n          name: \"stepData\",\n          type: \"object\",\n          description: \"Data for the current step\",\n          required: true,\n        },\n      ],\n      handler: async ({ workflowId, stepData }) => {\n        const workflow = workflowState.get(workflowId);\n        if (!workflow) {\n          return { error: \"Workflow not found\" };\n        }\n\n        const stepNumber = workflow.steps.length + 1;\n        const step = {\n          step: stepNumber,\n          action: stepData.action || \"execute_step\",\n          data: stepData,\n          status: \"in_progress\",\n          startedAt: new Date().toISOString(),\n        };\n\n        workflow.steps.push(step);\n        workflow.currentStep = stepNumber;\n        workflow.updatedAt = new Date().toISOString();\n\n        // Simulate step execution\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        step.status = \"completed\";\n        step.completedAt = new Date().toISOString();\n        step.result = {\n          success: true,\n          message: `Step ${stepNumber} completed successfully`,\n          data: stepData,\n        };\n\n        workflowState.set(workflowId, workflow);\n\n        return {\n          workflowId,\n          step: stepNumber,\n          result: step.result,\n          status: \"completed\",\n        };\n      },\n    },\n  ],\n  mcpServers: [\n    { endpoint: \"https://your-mcp-server.com/sse\" }\n  ],\n  async createMCPClient(config) {\n    return await experimental_createMCPClient({\n      transport: {\n        type: \"sse\",\n        url: config.endpoint,\n        headers: config.apiKey\n          ? { Authorization: `Bearer ${config.apiKey}` }\n          : undefined,\n      },\n    });\n  }\n});\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: \"/api/copilotkit\",\n  });\n\n  return handleRequest(req);\n};",
        "path": "src/app/api/copilotkit/route.ts",
        "language": "typescript",
        "type": "file"
      }
    ]
  }
}
