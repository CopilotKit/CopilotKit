{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "coagents-crew-starter",
  "type": "registry:page",
  "title": "Coagents Crew Starter",
  "description": "Quickstart for CopilotKit and CrewAI Crews on CrewAI Enterprise.",
  "dependencies": [
    "@copilotkit/react-core",
    "@copilotkit/react-ui",
    "@copilotkit/runtime-client-gql"
  ],
  "files": [
    {
      "path": "hooks/use-coagents-crew-starter.tsx",
      "content": "\"use client\";\nimport {\n  CrewsAgentState,\n  CrewsResponseStatus,\n  useCoAgent,\n  useCoAgentStateRender,\n  useCopilotAction,\n  useCopilotAdditionalInstructions,\n  useCopilotChat,\n} from \"@copilotkit/react-core\";\nimport { useEffect, useState } from \"react\";\nimport CrewHumanFeedbackRenderer, {\n  CrewsFeedback,\n} from \"@/registry/crews/crew-human-feedback-renderer\";\nimport CrewStateRenderer from \"@/registry/crews/crew-state-renderer\";\nimport { MessageRole, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport { CrewInChatInput } from \"@/registry/crews/crew-in-chat-input\";\n\n/**\n * Hook: useCoagentsCrewStarter\n *\n * This hook provides a simplified interface for initializing and managing \n * a copilot crew in your application. It handles:\n * \n * 1. Initialization with configured agent name from environment variables\n * 2. Collection of user inputs through a form interface\n * 3. Real-time state visualization during execution\n * 4. Feedback collection when the crew needs user input\n * 5. Result aggregation and presentation\n *\n * @param {Object} params - Parameters for initializing the crew\n * @param {Array<string>} params.inputs - Input field names to collect from the user\n * @returns {Object} - An object containing the crew's output\n * \n * @example\n * ```tsx\n * const { output } = useCoagentsCrewStarter({\n *   inputs: [\"query\", \"location\"]\n * });\n * ```\n */\nexport const useCoagentsCrewStarter = ({\n  inputs,\n}: {\n  inputs: Array<string>;\n}): {\n  output: string;\n} => {\n  const [initialMessageSent, setInitialMessageSent] = useState(false);\n  \n  // Use the agent name from environment variables\n  const agentName = process.env.NEXT_PUBLIC_COPILOTKIT_AGENT_NAME || \"DefaultAgent\";\n\n  // Initialize the crew agent with a default state\n  const { state, setState, run } = useCoAgent<\n    CrewsAgentState & {\n      result: string;\n      inputs: Record<string, string>;\n    }\n  >({\n    name: agentName,\n    initialState: {\n      inputs: {},\n      result: \"Crew result will appear here...\",\n    },\n  });\n\n  const { appendMessage, isLoading } = useCopilotChat();\n\n  // Instructions for the copilot to ensure inputs are gathered\n  const instructions =\n    \"INPUTS ARE ABSOLUTELY REQUIRED. Please call getInputs before proceeding with anything else.\";\n\n  // Send initial greeting when chat is loaded\n  useEffect(() => {\n    if (initialMessageSent || isLoading) return;\n\n    setTimeout(async () => {\n      await appendMessage(\n        new TextMessage({\n          content: \"Hi! Please provide your inputs to get started.\",\n          role: MessageRole.Developer,\n        })\n      );\n      setInitialMessageSent(true);\n    }, 0);\n  }, [initialMessageSent, isLoading, appendMessage]);\n\n  // Send a message with the inputs once they are provided\n  useEffect(() => {\n    if (!initialMessageSent && Object.values(state?.inputs || {}).length > 0) {\n      appendMessage(\n        new TextMessage({\n          role: MessageRole.Developer,\n          content: \"My inputs are: \" + JSON.stringify(state?.inputs),\n        })\n      ).then(() => {\n        setInitialMessageSent(true);\n      });\n    }\n  }, [initialMessageSent, state?.inputs, appendMessage]);\n\n  // Provide additional instructions to the copilot\n  useCopilotAdditionalInstructions({\n    instructions,\n    available:\n      Object.values(state?.inputs || {}).length > 0 ? \"enabled\" : \"disabled\",\n  });\n\n  // Action to get inputs from the user\n  useCopilotAction({\n    name: \"getInputs\",\n    description:\n      \"Collect required inputs from the user before starting the crew execution.\",\n    renderAndWaitForResponse({ status, respond }) {\n      if (status === \"inProgress\" || status === \"executing\") {\n        return (\n          <CrewInChatInput\n            status={status}\n            inputs={inputs}\n            onSubmit={async (inputValues) => {\n              setState({\n                ...state,\n                inputs: inputValues,\n              });\n              respond?.(\"Inputs submitted\");\n            }}\n          />\n        );\n      }\n      return <div className=\"text-sm text-zinc-500\">Inputs submitted</div>;\n    },\n  });\n\n  // Render the crew's state in real-time\n  useCoAgentStateRender({\n    name: agentName,\n    render: ({ state, status }) => (\n      <CrewStateRenderer state={state} status={status} />\n    ),\n  });\n\n  // Action to handle feedback requests from the crew\n  useCopilotAction({\n    name: \"crew_requesting_feedback\",\n    description: \"Request feedback from the user on the crew's output\",\n    renderAndWaitForResponse(props) {\n      const { status, args, respond } = props;\n      return (\n        <CrewHumanFeedbackRenderer\n          feedback={args as unknown as CrewsFeedback}\n          respond={respond}\n          status={status as CrewsResponseStatus}\n        />\n      );\n    },\n  });\n\n  // Return the output result of the crew\n  return {\n    output: state?.result || \"\",\n  };\n};\n",
      "type": "registry:hook",
      "target": "hooks/use-coagents-crew-starter.tsx"
    },
    {
      "path": "registry/crews/crew-in-chat-input.tsx",
      "content": "import React from \"react\";\n\n/**\n * Props for the CrewInChatInput component\n * \n * @property status - The current status of the crew operation\n * @property inputs - Array of input field names to render\n * @property onSubmit - Callback function triggered when form is submitted\n */\ninterface CrewInChatInputProps {\n  status: \"inProgress\" | \"executing\" | string;\n  inputs: string[];\n  onSubmit: (inputs: Record<string, string>) => Promise<void>;\n}\n\n/**\n * A form component that renders dynamic input fields for crew interactions\n * \n * This component creates a form with input fields based on the provided\n * input names. It's designed to collect information from users in a \n * conversational interface during crew execution.\n * \n * @example\n * ```tsx\n * <CrewInChatInput\n *   status=\"inProgress\"\n *   inputs={[\"query\", \"location\"]}\n *   onSubmit={async (values) => {\n *     console.log(values); // { query: \"...\", location: \"...\" }\n *   }}\n * />\n * ```\n */\nexport const CrewInChatInput: React.FC<CrewInChatInputProps> = ({\n  status,\n  inputs,\n  onSubmit,\n}) => {\n  // If not in progress or executing, show that inputs were submitted\n  console.log(\"status\", status);\n  if (status !== \"inProgress\" && status !== \"executing\") {\n    return <div className=\"text-sm text-white italic\">Inputs submitted</div>;\n  }\n\n  return (\n    <form\n      className=\"flex flex-col gap-4 bg-black rounded-lg p-4 border border-zinc-800 shadow-sm\"\n      onSubmit={async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const formData = new FormData(e.currentTarget);\n        const inputValues = Object.fromEntries(\n          inputs.map((input) => [input, formData.get(input)?.toString() || \"\"])\n        );\n\n        await onSubmit(inputValues);\n      }}\n    >\n      <div className=\"flex flex-col gap-4\">\n        {inputs.map((input) => (\n          <div\n            key={input}\n            className=\"flex flex-col gap-2\"\n          >\n            <label \n              htmlFor={input}\n              className=\"text-sm font-medium text-white capitalize\"\n            >\n              {input}\n            </label>\n            <textarea\n              id={input}\n              name={input}\n              autoFocus\n              placeholder={`Enter ${input} here`}\n              required\n              className=\"p-3 border rounded-md border-zinc-800 text-white focus:outline-none\"\n              rows={3}\n            />\n          </div>\n        ))}\n        <button\n          type=\"submit\"\n          className=\"px-4 py-2 bg-white hover:bg-zinc-300 active:bg-zinc-400 text-black rounded-md text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors self-start mt-2 shadow-sm\"\n        >\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/crew-in-chat-input.tsx"
    },
    {
      "path": "registry/crews/crew-state-renderer.tsx",
      "content": "import {\n  CrewsAgentState,\n  CrewsResponseStatus,\n  CrewsTaskStateItem,\n  CrewsToolStateItem,\n} from \"@copilotkit/react-core\";\nimport { useEffect } from \"react\";\nimport { useMemo, useRef, useState } from \"react\";\n\n/**\n * Component that renders the crew's execution state in real-time\n * \n * This component visualizes:\n * - Steps being executed by the crew\n * - Tasks being performed\n * - Thoughts and results during execution\n * \n * Features:\n * - Collapsible UI to save space\n * - Auto-scrolling to newest items\n * - Highlighting of newly added items\n * \n * @param state - The current state of the crew agent\n * @param status - The response status of the crew\n */\nfunction CrewStateRenderer({\n  state,\n  status,\n}: {\n  state: CrewsAgentState;\n  status: CrewsResponseStatus;\n}) {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const prevItemsLengthRef = useRef<number>(0);\n  const [highlightId, setHighlightId] = useState<string | null>(null);\n\n  // Combine and sort steps and tasks by timestamp\n  const items = useMemo(() => {\n    if (!state) return [];\n    return [...(state.steps || []), ...(state.tasks || [])].sort(\n      (a, b) =>\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n  }, [state]);\n\n  // Handle highlighting of new items and auto-scrolling\n  useEffect(() => {\n    if (!state) return;\n    if (items.length > prevItemsLengthRef.current) {\n      const newestItem = items[items.length - 1];\n      setHighlightId(newestItem.id);\n      setTimeout(() => setHighlightId(null), 1500);\n\n      if (contentRef.current && !isCollapsed) {\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n    prevItemsLengthRef.current = items.length;\n  }, [items, isCollapsed, state]);\n\n  if (!state) {\n    return <div className=\"text-sm text-zinc-500 dark:text-zinc-400 italic\">Loading crew state...</div>;\n  }\n\n  // Hide entirely if collapsed & empty & not in progress\n  if (isCollapsed && items.length === 0 && status !== \"inProgress\") return null;\n\n  return (\n    <div className=\"mt-3 bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-3 shadow-sm\">\n      <div\n        className=\"flex items-center gap-2 cursor-pointer hover:text-zinc-700 dark:hover:text-zinc-300 text-zinc-800 dark:text-zinc-200 select-none\"\n        onClick={() => setIsCollapsed(!isCollapsed)}\n      >\n        <span className=\"text-xs\">{isCollapsed ? \"▶\" : \"▼\"}</span>\n        <span className=\"font-medium\">\n          {status === \"inProgress\" ? \n            <span className=\"text-zinc-500 dark:text-zinc-400 animate-pulse\">Crew is analyzing...</span> : \n            <span className=\"text-zinc-500 dark:text-zinc-400\">Crew analysis</span>\n          }\n          {!isCollapsed && items.length > 0 && ` (${items.length} steps)`}\n        </span>\n      </div>\n\n      {!isCollapsed && (\n        <div\n          ref={contentRef}\n          className=\"max-h-60 overflow-auto border-l border-zinc-200 dark:border-zinc-700 pl-3 ml-1 mt-3 pr-2\"\n        >\n          {items.length > 0 ? (\n            items.map((item) => {\n              const isTool = (item as CrewsToolStateItem).tool !== undefined;\n              const isHighlighted = item.id === highlightId;\n              return (\n                <div\n                  key={item.id}\n                  className={`mb-3 pb-3 border-b border-zinc-100 dark:border-zinc-800 last:border-0 ${\n                    isHighlighted ? \"animate-fadeIn\" : \"\"\n                  }`}\n                >\n                  <div className=\"font-medium text-sm text-zinc-800 dark:text-zinc-200\">\n                    {isTool\n                      ? (item as CrewsToolStateItem).tool\n                      : (item as CrewsTaskStateItem).name}\n                  </div>\n                  {\"thought\" in item && item.thought && (\n                    <div className=\"text-xs mt-1.5 text-zinc-600 dark:text-zinc-400\">\n                      <span className=\"font-medium text-zinc-700 dark:text-zinc-300\">Thought:</span> {item.thought}\n                    </div>\n                  )}\n                  {\"result\" in item && item.result !== undefined && (\n                    <pre className=\"text-xs mt-1.5 p-2 bg-zinc-50 dark:bg-zinc-900 rounded border border-zinc-100 dark:border-zinc-800 overflow-x-auto text-zinc-700 dark:text-zinc-300\">\n                      {typeof item.result === 'object' \n                        ? JSON.stringify(item.result, null, 2)\n                        : item.result}\n                    </pre>\n                  )}\n                  {\"description\" in item && item.description && (\n                    <div className=\"text-xs mt-1.5 text-zinc-600 dark:text-zinc-400\">{item.description}</div>\n                  )}\n                </div>\n              );\n            })\n          ) : (\n            <div className=\"text-xs italic text-zinc-500 dark:text-zinc-400 py-2\">No activity yet...</div>\n          )}\n        </div>\n      )}\n\n      {/* Custom animation for highlighting new items */}\n      <style jsx>{`\n        @keyframes fadeIn {\n          0% { background-color: rgba(59, 130, 246, 0.1); }\n          100% { background-color: transparent; }\n        }\n        .animate-fadeIn {\n          animation: fadeIn 1.5s ease-out;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default CrewStateRenderer;\n",
      "type": "registry:component",
      "target": "components/crew-state-renderer.tsx"
    },
    {
      "path": "registry/crews/crew-human-feedback-renderer.tsx",
      "content": "import { CrewsResponseStatus, CrewsStateItem } from \"@copilotkit/react-core\";\nimport { Markdown } from \"@copilotkit/react-ui\";\nimport { useState } from \"react\";\n\n/**\n * Interface defining the feedback structure requested by the crew agents\n */\nexport interface CrewsFeedback extends CrewsStateItem {\n  /**\n   * Output of the task execution that requires user feedback\n   */\n  task_output?: string;\n}\n\n/**\n * Component that renders a UI for agent-requested user feedback\n * \n * This component presents the task output from the crew and provides\n * buttons for the user to approve or reject the proposed solution.\n * \n * @param feedback - The feedback object containing task output\n * @param respond - Callback function to send user response back to the crew\n * @param status - Current status of the feedback request\n */\nfunction CrewHumanFeedbackRenderer({\n  feedback,\n  respond,\n  status,\n}: {\n  feedback: CrewsFeedback;\n  respond?: (input: string) => void;\n  status: CrewsResponseStatus;\n}) {\n  const [isExpanded, setIsExpanded] = useState(true);\n  const [userResponse, setUserResponse] = useState<string | null>(null);\n\n  // If feedback request is complete, show the user's response\n  if (status === \"complete\") {\n    return (\n      <div className=\"mt-3 text-right text-sm text-zinc-600 dark:text-zinc-400 italic\">\n        {userResponse || \"Feedback submitted.\"}\n      </div>\n    );\n  }\n\n  // If feedback request is in progress, show the feedback UI\n  if (status === \"inProgress\" || status === \"executing\") {\n    return (\n      <div className=\"mt-3 bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-3 shadow-sm\">\n        <div className=\"flex justify-between items-center mb-2 border-b border-zinc-100 dark:border-zinc-700 pb-2\">\n          <h3 className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">Feedback Required</h3>\n          <button\n            className=\"text-xs text-zinc-500 hover:text-zinc-700 dark:text-zinc-400 dark:hover:text-zinc-200 transition-colors\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {isExpanded ? \"Hide\" : \"Show\"} Details\n          </button>\n        </div>\n\n        {isExpanded && (\n          <div className=\"border border-zinc-100 dark:border-zinc-700 rounded-md p-3 mb-3 text-sm bg-zinc-50 dark:bg-zinc-900 text-zinc-800 dark:text-zinc-200 max-h-[200px] overflow-y-auto\">\n            <Markdown content={feedback.task_output || \"\"} />\n          </div>\n        )}\n        \n        <div className=\"flex justify-end gap-2\">\n          <button\n            className=\"px-4 py-2 cursor-pointer bg-zinc-200 hover:bg-zinc-300 active:bg-zinc-400 dark:bg-zinc-700 dark:hover:bg-zinc-600 dark:active:bg-zinc-500 text-zinc-800 dark:text-zinc-200 rounded-md text-sm font-medium transition-colors\"\n            onClick={() => {\n              setUserResponse(\"Rejected\");\n              // Send 'Reject' feedback to the crew\n              respond?.(\"Reject\");\n            }}\n          >\n            Reject\n          </button>\n          <button\n            className=\"px-4 py-2 cursor-pointer bg-black hover:bg-zinc-800 active:bg-zinc-900 text-white rounded-md text-sm font-medium transition-colors\"\n            onClick={() => {\n              setUserResponse(\"Approved\");\n              // Send 'Approve' feedback to the crew\n              respond?.(\"Approve\");\n            }}\n          >\n            Approve\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport default CrewHumanFeedbackRenderer;\n",
      "type": "registry:component",
      "target": "components/crew-human-feedback-renderer.tsx"
    },
    {
      "path": "registry/layout/coagents-crew-starter-layout.tsx",
      "content": "\"use client\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport React from \"react\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n// Read environment variables for copilot configuration\nconst apiKey = process.env.NEXT_PUBLIC_COPILOT_API_KEY || \"\";\nconst agentName = process.env.NEXT_PUBLIC_COPILOTKIT_AGENT_NAME || \"DefaultAgent\";\n\n/**\n * Layout component for the CopilotKit interface\n * \n * This component creates a two-column layout:\n * 1. Left column (60%): Chat interface for user interaction\n * 2. Right column (40%): Results panel to display crew output\n * \n * It configures CopilotKit with environment variables for API key and agent name\n * and provides optimized styling for both light and dark modes.\n */\nexport default function CoagentsCrewStarterLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <CopilotKit agent={agentName} publicApiKey={apiKey}>\n      <div className=\"min-h-screen w-full bg-white dark:bg-zinc-950 text-zinc-900 dark:text-zinc-100\">\n        <div className=\"flex flex-col md:flex-row w-full h-screen\">\n          {/* Chat Column */}\n          <div className=\"w-full md:w-3/5 h-full overflow-y-auto border-r border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900\">\n            <CopilotChat\n              instructions=\"You are a helpful assistant that can help me with my tasks.\"\n              className=\"h-full flex flex-col\"\n            />\n          </div>\n\n          {/* Results Column */}\n          <div className=\"w-full md:w-2/5 h-full overflow-y-auto bg-zinc-50 dark:bg-zinc-950 p-4\">\n            <div className=\"rounded-lg shadow-sm bg-white dark:bg-zinc-900 h-full border border-zinc-100 dark:border-zinc-800 overflow-hidden\">\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    </CopilotKit>\n  );\n}\n",
      "type": "registry:component",
      "target": "app/copilotkit/layout.tsx"
    },
    {
      "path": "registry/quickstarts/coagents-crew-starter.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { useCoagentsCrewStarter } from \"@/hooks/use-coagents-crew-starter\";\n\n/**\n * Format text output from the Crew for better readability\n * \n * This utility function:\n * - Preserves existing formatting if present\n * - Converts markdown bold (**text**) to HTML <strong> tags\n * - Adds appropriate spacing for listed items\n * - Handles both pre-formatted and unformatted text\n * \n * @param text - The raw text output from the crew\n * @returns Formatted HTML string ready for display\n */\nfunction formatText(text: string): string {\n  if (!text) return \"\";\n\n  // Check if text already has formatting (multiple consecutive newlines)\n  const hasFormatting = /\\n\\s*\\n/.test(text);\n\n  // Process markdown elements\n  let formatted = text;\n\n  // Convert markdown bold to HTML bold\n  formatted = formatted.replace(/\\*\\*([^*]+)\\*\\*/g, \"<strong>$1</strong>\");\n  \n  // Convert markdown lists to proper HTML with spacing\n  formatted = formatted.replace(/^- (.+)$/gm, \"<li>$1</li>\");\n  formatted = formatted.replace(/(<li>.+<\\/li>\\n)+/g, \"<ul class='list-disc pl-5 my-2'>$&</ul>\");\n\n  if (hasFormatting) {\n    // Just convert newlines to <br> tags for pre-formatted text\n    return formatted.replace(/\\n/g, \"<br>\");\n  } else {\n    // For unformatted text, add proper spacing\n    // Add double line breaks before numbered items\n    formatted = formatted.replace(/(\\d+\\.)/g, \"<br><br>$1\");\n\n    // Add single line breaks before properties\n    formatted = formatted.replace(/(\\s-\\s)/g, \"<br>$1\");\n\n    return formatted;\n  }\n}\n\n/**\n * Main component for the Copilot Crew interface\n * \n * This component:\n * 1. Initializes the crew with required input fields\n * 2. Renders the formatted output from the crew\n * 3. Provides a clean, readable interface for users\n */\nexport default function CoagentsCrewStarter() {\n  const { output } = useCoagentsCrewStarter({\n    /**\n     * Define the input fields needed to start your crew.\n     * These will be presented as a form in the chat interface.\n     */\n    inputs: [\"YOUR_INPUTS_HERE\"],\n  });\n\n  return (\n    <div className=\"p-6 h-full overflow-y-auto\">\n      <h2 className=\"text-xl font-semibold mb-4 text-zinc-800 dark:text-zinc-100 border-b border-zinc-200 dark:border-zinc-700 pb-2\">\n        Crew Results\n      </h2>\n      \n      {!output || output === \"Crew result will appear here...\" ? (\n        <div className=\"flex flex-col items-center justify-center h-[calc(100%-3rem)] text-center p-6 bg-zinc-50 dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700\">\n          <div className=\"text-zinc-400 dark:text-zinc-500 text-sm italic mb-2\">\n            Waiting for input...\n          </div>\n          <div className=\"text-zinc-500 dark:text-zinc-400 font-medium\">\n            Results will appear here after providing inputs in the chat\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-4 shadow-sm\">\n          <div \n            className=\"prose prose-sm dark:prose-invert max-w-none text-zinc-800 dark:text-zinc-200 whitespace-pre-line\"\n            dangerouslySetInnerHTML={{ __html: formatText(output) }} \n          />\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/copilotkit/page.tsx"
    }
  ]
}