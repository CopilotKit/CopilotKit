{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "standard-starter",
  "type": "registry:block",
  "title": "Standard Starter",
  "description": "A starter for CopilotKit with no agent framework.",
  "dependencies": [
    "@copilotkit/runtime",
    "@copilotkit/react-core",
    "@copilotkit/react-ui"
  ],
  "files": [
    {
      "path": "registry/layout/standard-layout.tsx",
      "content": "import \"@copilotkit/react-ui/styles.css\";\nimport React, { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n// Where CopilotKit will proxy requests to. If you're using Copilot Cloud, this environment variable will be empty.\nconst runtimeUrl = process.env.NEXT_PUBLIC_COPILOTKIT_RUNTIME_URL\n// When using Copilot Cloud, all we need is the publicApiKey.\nconst publicApiKey = process.env.NEXT_PUBLIC_COPILOT_API_KEY;\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <CopilotKit\n      runtimeUrl={runtimeUrl}\n      publicApiKey={publicApiKey}\n    >\n      {children}\n    </CopilotKit>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/copilotkit/layout.tsx"
    },
    {
      "path": "registry/quickstarts/no-agent-framework.tsx",
      "content": "\"use client\";\n\nimport { useCopilotAction, useCopilotReadable } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar, useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\nimport { useState } from \"react\";\n\nexport default function CopilotKitPage() {\n  const [themeColor, setThemeColor] = useState(\"#6366f1\");\n\n  // ü™Å Frontend Actions: https://docs.copilotkit.ai/guides/frontend-actions\n  useCopilotAction({\n    name: \"setThemeColor\",\n    parameters: [{\n      name: \"themeColor\",\n      description: \"The theme color to set. Make sure to pick nice colors.\",\n      required: true, \n    }],\n    handler({ themeColor }) {\n      setThemeColor(themeColor);\n    },\n  });\n\n  return (\n    <main style={{ \"--copilot-kit-primary-color\": themeColor } as CopilotKitCSSProperties}>\n      <YourMainContent themeColor={themeColor} />\n      <CopilotSidebar\n        clickOutsideToClose={false}\n        defaultOpen={true}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"üëã Hi, there! You're chatting with an LLM.\\n\\n Since you scaffolded me with **CopilotKit**, you can ask me to do some cool stuff. \\n\\nFor example, you can ask me to:\\n- Set the theme to orange\\n- Write a proverb about AI\\n- Generate a cool gradient card\\n\\nThen just watch as I perform tasks around the entire application!\"\n        }}\n      />\n    </main>\n  );\n}\n\nfunction YourMainContent({ themeColor }: { themeColor: string }) {\n  const [proverbs, setProverbs] = useState<string[]>(['Success is the sum of small efforts, repeated day in and day out.']);\n\n  // ü™Å Copilot Suggestions: https://docs.copilotkit.ai/guides/copilot-suggestions\n  useCopilotChatSuggestions({\n    maxSuggestions: 3,\n    minSuggestions: 3,\n    instructions: \"Give the user 3 options: 'Change theme color' (choose a random hexadecimal color), 'Write a proverb about {topic}' (choose a random topic) or 'Generate a gradient card between {color1} and {color2}' (choose random hexadecimal colors)\",\n  })\n\n  // ü™Å Frontend Readables: https://docs.copilotkit.ai/guides/connect-your-data/frontend\n  useCopilotReadable({\n    description: \"The current list of proverbs\",\n    value: proverbs,\n  })\n\n  // ü™Å Frontend Tools: https://docs.copilotkit.ai/guides/frontend-actions\n  useCopilotAction({\n    name: \"addProverb\",\n    parameters: [{\n      name: \"proverb\",\n      description: \"The proverb to add. Make it witty, short and concise.\",\n      required: true,\n    }],\n    handler: ({ proverb }) => {\n      setProverbs([...proverbs, proverb]);\n    },\n  });\n\n  //ü™Å Generative UI: https://docs.copilotkit.ai/guides/generative-ui\n  useCopilotAction({\n    name: \"generateGradientCard\",\n    description: \"Generate a card with a card with a background gradient between two colors.\",\n    parameters: [\n      { name: \"color1\", type: \"string\", required: true },\n      { name: \"color2\", type: \"string\", required: true },\n    ],\n    render: ({ args }) => {\n      return (\n        <div \n          style={{ background: `linear-gradient(to right, ${args.color1}, ${args.color2})`}} \n          className=\"p-10 my-4 rounded-xl flex flex-col justify-between flex-row\"\n        >\n          <p className=\"text-white/50\">{args.color1}</p>\n          <p className=\"text-white/60\">{args.color2}</p>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div\n      style={{ backgroundColor: themeColor }}\n      className=\"h-screen w-screen flex justify-center items-center flex-col transition-colors duration-300\"\n    >\n      <div className=\"bg-white/20 backdrop-blur-md p-8 rounded-2xl shadow-xl max-w-2xl w-full\">\n        <h1 className=\"text-4xl font-bold text-white mb-2 text-center\">Proverbs</h1>\n        <p className=\"text-gray-200 text-center italic mb-6\">This is a demonstrative page, but it could be anything you want! ü™Å</p>\n        <hr className=\"border-white/20 my-6\" />\n        <div className=\"flex flex-col gap-3\">\n          {proverbs.map((proverb, index) => (\n            <div \n              key={index} \n              className=\"bg-white/15 p-4 rounded-xl text-white relative group hover:bg-white/20 transition-all\"\n            >\n              <p className=\"pr-8\">{proverb}</p>\n              <button \n                onClick={() => setProverbs(proverbs.filter((_, i) => i !== index))}\n                className=\"absolute right-3 top-3 opacity-0 group-hover:opacity-100 transition-opacity \n                  bg-red-500 hover:bg-red-600 text-white rounded-full h-6 w-6 flex items-center justify-center\"\n              >\n                ‚úï\n              </button>\n            </div>\n          ))}\n        </div>\n        {proverbs.length === 0 && <p className=\"text-center text-white/80 italic my-8\">\n          No proverbs yet. Ask the assistant to add some!\n        </p>}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/copilotkit/page.tsx"
    }
  ]
}