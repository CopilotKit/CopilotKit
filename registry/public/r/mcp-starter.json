{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mcp-starter",
  "type": "registry:block",
  "title": "MCP Starter",
  "description": "A starter for CopilotKit with MCP.",
  "dependencies": [
    "@copilotkit/react-core",
    "@copilotkit/react-ui"
  ],
  "files": [
    {
      "path": "registry/layout/standard-layout.tsx",
      "content": "import \"@copilotkit/react-ui/styles.css\";\nimport React, { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n// Where CopilotKit will proxy requests to. If you're using Copilot Cloud, this environment variable will be empty.\nconst runtimeUrl = process.env.NEXT_PUBLIC_COPILOTKIT_RUNTIME_URL\n// When using Copilot Cloud, all we need is the publicApiKey.\nconst publicApiKey = process.env.NEXT_PUBLIC_COPILOT_API_KEY;\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <CopilotKit\n      runtimeUrl={runtimeUrl}\n      publicApiKey={publicApiKey}\n    >\n      {children}\n    </CopilotKit>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/copilotkit/layout.tsx"
    },
    {
      "path": "registry/quickstarts/mcp-starter/components/default-tool-render.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ninterface ToolCallProps {\n  status: \"complete\" | \"inProgress\" | \"executing\";\n  name?: string;\n  args?: any;\n  result?: any;\n}\n\nexport function DefaultToolRender({status, name = \"\", args, result}: ToolCallProps) {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const classes = {\n    container: \"bg-white rounded-xl overflow-hidden w-full border-2 border-gray-200 shadow-md transition-all duration-200 hover:shadow-xl my-1\",\n    header: \"p-4 flex items-center cursor-pointer group bg-gray-50 border-b border-gray-200\",\n    title: \"text-gray-900 font-semibold overflow-hidden text-ellipsis\",\n    statusContainer: \"ml-auto flex items-center gap-2\",\n    statusText: \"text-xs text-gray-700 font-medium mr-1\",\n    content: \"px-5 pb-5 pt-3 text-gray-800 font-mono text-xs\",\n    section: \"mb-4\",\n    sectionTitle: \"text-gray-700 text-xs uppercase tracking-wider mb-2 font-sans font-bold\",\n    codeBlock: \"whitespace-pre-wrap max-h-[200px] overflow-auto text-gray-900 bg-gray-50 p-3 rounded border border-gray-200\",\n    chevron: {\n      base: \"text-gray-700 mr-2 transition-transform duration-200\",\n      open: \"rotate-90\",\n      hover: \"group-hover:text-gray-900\"\n    },\n    contentWrapper: {\n      base: \"overflow-hidden transition-all duration-300 ease-in-out\",\n      open: \"max-h-[600px] opacity-100\",\n      closed: \"max-h-0 opacity-0\"\n    }\n  };\n\n  // Status indicator colors\n  const statusColors = {\n    complete: \"bg-emerald-500 shadow-emerald-500/40\",\n    inProgress: \"bg-amber-500 shadow-amber-500/40\",\n    executing: \"bg-blue-500 shadow-blue-500/40\"\n  };\n\n  // Simplified format function\n  const format = (content: any): React.ReactNode => {\n    if (!content) return null;\n    return typeof content === \"object\" \n      ? <span>{JSON.stringify(content, null, 2)}</span>\n      : <span>{String(content)}</span>;\n  };\n\n  const getStatusColor = () => {\n    const baseColor = statusColors[status].split(' ')[0];\n    const shadowColor = statusColors[status].split(' ')[1];\n    return `${baseColor} ${(status === \"inProgress\" || status === \"executing\") ? \"animate-pulse\" : \"\"} shadow-[0_0_10px] ${shadowColor}`;\n  };\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.header} onClick={() => setIsOpen(!isOpen)}>\n        <ChevronRight isOpen={isOpen} chevronClasses={classes.chevron} />\n        <span className={classes.title}>\n          {name || \"MCP Tool Call\"}\n        </span>\n        <div className={classes.statusContainer}>\n          <span className={classes.statusText}>\n            {status === \"complete\" ? \"Completed\" : status === \"inProgress\" ? \"In Progress\" : \"Executing\"}\n          </span>\n          <div className={`w-3 h-3 rounded-full ${getStatusColor()}`} />\n        </div>\n      </div>\n\n      <div className={`${classes.contentWrapper.base} ${isOpen ? classes.contentWrapper.open : classes.contentWrapper.closed}`}>\n        <div className={classes.content}>\n          <div className={classes.section}>\n            <div className={classes.sectionTitle}>Name</div>\n            <pre className={classes.codeBlock}>{name}</pre>\n          </div>\n          {args && (\n            <div className={classes.section}>\n              <div className={classes.sectionTitle}>Parameters</div>\n              <pre className={classes.codeBlock}>{format(args)}</pre>\n            </div>\n          )}\n\n          {status === \"complete\" && result && (\n            <div className={classes.section}>\n              <div className={classes.sectionTitle}>Result</div>\n              <pre className={classes.codeBlock}>{format(result)}</pre>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst ChevronRight = ({ isOpen, chevronClasses }: { isOpen: boolean; chevronClasses: any }) => {\n  return (\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className={`${chevronClasses.base} ${isOpen ? chevronClasses.open : ''} ${chevronClasses.hover}`} stroke=\"currentColor\" strokeWidth=\"2.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <polyline points=\"9 18 15 12 9 6\"></polyline>\n    </svg>\n  );\n};",
      "type": "registry:component"
    },
    {
      "path": "registry/quickstarts/mcp-starter/page.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { useCopilotChat, useCopilotAction, CatchAllActionRenderProps } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar, useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\nimport { MCPEndpointConfig } from \"@copilotkit/runtime\";\nimport { DefaultToolRender } from \"@/registry/quickstarts/mcp-starter/components/default-tool-render\";\n\nconst themeColor = \"#6366f1\";\n\nexport default function CopilotKitPage() {\n  return (\n    <main style={{ \"--copilot-kit-primary-color\": themeColor } as CopilotKitCSSProperties}>\n      <YourMainContent />\n      <CopilotSidebar\n        clickOutsideToClose={false}\n        defaultOpen={true}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"üëã Hi, there! You're chatting with an LLM that can use MCP servers.\\n\\n Since you scaffolded me with **CopilotKit**, you can ask me to use any MCP servers that you have set up on this page.\\n\\nIn your codebase, check out this page's code to see how it all works! You can also [checkout our documentation](https://docs.copilotkit.ai/guides/model-context-protocol) for any questions.\\n\\nNow, what can I do for you?\"\n        }}\n      />\n    </main>\n  );\n}\n\nfunction YourMainContent() {\n  const { mcpServers, setMcpServers } = useCopilotChat();\n  const [newMcpServer, setNewMcpServer] = useState(\"\");\n\n  useEffect(() => {\n    setMcpServers([\n      // Add any initial MCP servers here, find more at https://mcp.composio.dev or https://actions.zapier.com!\n    ]);\n  }, []);\n\n  const removeMcpServer = (url: string) => {\n    setMcpServers(mcpServers.filter((server) => server.endpoint !== url));\n  }\n\n  const addMcpServer = (server: MCPEndpointConfig) => {\n    setMcpServers([...mcpServers, server]);\n  }\n\n  // ü™Å Copilot Suggestions: https://docs.copilotkit.ai/guides/copilot-suggestions\n  useCopilotChatSuggestions({\n    maxSuggestions: 3,\n    instructions: \"Give the user a short and concise suggestion based on the conversation and your available tools. If you have no tools, don't suggest anything.\",\n  })\n\n  // ü™Å Catch-all Action for rendering MCP tool calls: https://docs.copilotkit.ai/guides/generative-ui?gen-ui-type=Catch+all+renders\n  useCopilotAction({\n    name: \"*\",\n    render: ({ name, status, args, result }: CatchAllActionRenderProps<[]>) => (\n      <DefaultToolRender status={status} name={name} args={args} result={result} />\n    ),\n  });\n\n  // Style variables\n  const classes = {\n    wrapper: \"h-screen w-screen flex justify-center items-center flex-col transition-colors duration-300\",\n    container: \"bg-white/20 backdrop-blur-md p-8 rounded-2xl shadow-xl max-w-2xl w-full\",\n    server: \"bg-white/15 p-4 rounded-xl text-white relative group hover:bg-white/20 transition-all\",\n    deleteButton: \"absolute right-3 top-3 opacity-0 group-hover:opacity-100 transition-opacity bg-red-500 hover:bg-red-600 text-white rounded-full h-6 w-6 flex items-center justify-center\",\n    input: \"bg-white/20 p-4 rounded-xl text-white relative group hover:bg-white/30 transition-all focus:outline-none focus:ring-2 focus:ring-indigo-500\",\n    submitButton: \"w-full p-4 rounded-xl bg-indigo-500 text-white hover:bg-indigo-600 transition-all\",\n  }\n\n  return (\n    <div\n      style={{ backgroundColor: themeColor }}\n      className={classes.wrapper}\n    >\n      <div className={classes.container}>\n        <h1 className=\"text-4xl font-bold text-white mb-2 text-center\">MCP Servers</h1>\n        <p className=\"text-gray-200 text-center\">Discover more MCP servers at <a href=\"https://mcp.composio.dev\" className=\"text-indigo-200\">mcp.composio.dev.</a></p>\n        <hr className=\"border-white/20 my-6\" />\n\n        <div className=\"flex flex-col gap-6\">\n          {mcpServers.map((server, index) => (\n            <div key={index} className={classes.server}>\n              <p className=\"pr-8 truncate\">{server.endpoint}</p>\n              <button className={classes.deleteButton} onClick={() => removeMcpServer(server.endpoint)}>\n                ‚úï\n              </button>\n            </div>\n          ))}\n          <input \n            type=\"text\" \n            placeholder=\"Enter MCP server URL\" \n            className={classes.input} \n            value={newMcpServer}\n            onChange={(e) => setNewMcpServer(e.target.value)}\n          />\n          <button className={classes.submitButton} onClick={() => {\n            if (newMcpServer) {\n              addMcpServer({ endpoint: newMcpServer });\n              setNewMcpServer(\"\");\n            }\n          }} >\n            Add MCP Server\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/copilotkit/page.tsx"
    }
  ]
}