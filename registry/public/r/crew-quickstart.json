{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "crew-quickstart",
  "type": "registry:page",
  "title": "Crew Enterprise Quickstart",
  "description": "A quickstart guide for setting up CopilotKit in an enterprise environment with a crew.",
  "dependencies": [
    "@copilotkit/react-core",
    "@copilotkit/runtime-client-gql"
  ],
  "files": [
    {
      "path": "hooks/crew-quickstart/use-crew-quickstart.tsx",
      "content": "\"use client\";\n\nimport {\n  CrewsAgentState,\n  CrewsResponseStatus,\n  CrewsStateItem,\n  CrewsTaskStateItem,\n  CrewsToolStateItem,\n  useCoAgent,\n  useCoAgentStateRender,\n  useCopilotAction,\n  useCopilotChat,\n  useCopilotAdditionalInstructions,\n} from \"@copilotkit/react-core\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { MessageRole, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\ninterface CrewsFeedback extends CrewsStateItem {\n  /**\n   * Output of the task execution\n   */\n  task_output?: string;\n}\n\n/**\n * Renders your Crew's steps & tasks in real-time.\n */\nfunction CrewStateRenderer({\n  state,\n  status,\n}: {\n  state: CrewsAgentState;\n  status: CrewsResponseStatus;\n}) {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const prevItemsLengthRef = useRef<number>(0);\n  const [highlightId, setHighlightId] = useState<string | null>(null);\n\n  // Combine steps + tasks\n  const items = useMemo(() => {\n    if (!state) return [];\n    return [...(state.steps || []), ...(state.tasks || [])].sort(\n      (a, b) =>\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n  }, [state]);\n\n  // Highlight newly added item & auto-scroll\n  useEffect(() => {\n    if (!state) return;\n    if (items.length > prevItemsLengthRef.current) {\n      const newestItem = items[items.length - 1];\n      setHighlightId(newestItem.id);\n      setTimeout(() => setHighlightId(null), 1500);\n\n      if (contentRef.current && !isCollapsed) {\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n    prevItemsLengthRef.current = items.length;\n  }, [items, isCollapsed, state]);\n\n  if (!state) {\n    return <div>Loading crew state...</div>;\n  }\n\n  // Hide entirely if collapsed & empty & not in progress\n  if (isCollapsed && items.length === 0 && status !== \"inProgress\") return null;\n\n  return (\n    <div style={{ marginTop: \"8px\", fontSize: \"0.9rem\" }}>\n      <div\n        style={{ cursor: \"pointer\", display: \"flex\", alignItems: \"center\" }}\n        onClick={() => setIsCollapsed(!isCollapsed)}\n      >\n        <span style={{ marginRight: 4 }}>{isCollapsed ? \"▶\" : \"▼\"}</span>\n        {status === \"inProgress\" ? \"Crew is analyzing...\" : \"Crew analysis\"}\n      </div>\n\n      {!isCollapsed && (\n        <div\n          ref={contentRef}\n          style={{\n            maxHeight: \"200px\",\n            overflow: \"auto\",\n            borderLeft: \"1px solid #ccc\",\n            paddingLeft: \"8px\",\n            marginLeft: \"4px\",\n            marginTop: \"4px\",\n          }}\n        >\n          {items.length > 0 ? (\n            items.map((item) => {\n              const isTool = (item as CrewsToolStateItem).tool !== undefined;\n              const isHighlighted = item.id === highlightId;\n              return (\n                <div\n                  key={item.id}\n                  style={{\n                    marginBottom: \"8px\",\n                    animation: isHighlighted ? \"fadeIn 0.5s\" : undefined,\n                  }}\n                >\n                  <div style={{ fontWeight: \"bold\" }}>\n                    {isTool\n                      ? (item as CrewsToolStateItem).tool\n                      : (item as CrewsTaskStateItem).name}\n                  </div>\n                  {\"thought\" in item && item.thought && (\n                    <div style={{ opacity: 0.8, marginTop: \"4px\" }}>\n                      Thought: {item.thought}\n                    </div>\n                  )}\n                  {\"result\" in item && item.result !== undefined && (\n                    <pre style={{ fontSize: \"0.85rem\", marginTop: \"4px\" }}>\n                      {JSON.stringify(item.result, null, 2)}\n                    </pre>\n                  )}\n                  {\"description\" in item && item.description && (\n                    <div style={{ marginTop: \"4px\" }}>{item.description}</div>\n                  )}\n                </div>\n              );\n            })\n          ) : (\n            <div style={{ opacity: 0.7 }}>No activity yet...</div>\n          )}\n        </div>\n      )}\n\n      {/* Simple fadeIn animation */}\n      <style>{`\n        @keyframes fadeIn {\n          0% { opacity: 0; transform: translateY(4px); }\n          100% { opacity: 1; transform: translateY(0); }\n        }\n      `}</style>\n    </div>\n  );\n}\n\n/**\n * Renders a simple UI for agent-requested user feedback (Approve / Reject).\n */\nfunction CrewHumanFeedbackRenderer({\n  feedback,\n  respond,\n  status,\n}: {\n  feedback: CrewsFeedback;\n  respond?: (input: string) => void;\n  status: CrewsResponseStatus;\n}) {\n  const [isExpanded, setIsExpanded] = useState(true);\n  const [userResponse, setUserResponse] = useState<string | null>(null);\n\n  if (status === \"complete\") {\n    return (\n      <div style={{ marginTop: 8, textAlign: \"right\" }}>\n        {userResponse || \"Feedback submitted.\"}\n      </div>\n    );\n  }\n\n  if (status === \"inProgress\" || status === \"executing\") {\n    return (\n      <div style={{ marginTop: 8 }}>\n        {isExpanded && (\n          <div\n            style={{\n              border: \"1px solid #ddd\",\n              padding: \"8px\",\n              marginBottom: \"8px\",\n            }}\n          >\n            {feedback.task_output}\n          </div>\n        )}\n        <div style={{ textAlign: \"right\" }}>\n          <button\n            style={{ marginRight: 8 }}\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {isExpanded ? \"Hide\" : \"Show\"} Feedback\n          </button>\n          <button\n            style={{\n              marginRight: 8,\n              backgroundColor: \"#222222\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              color: \"white\",\n              cursor: \"pointer\",\n              borderRadius: \"4px\",\n            }}\n            onClick={() => {\n              setUserResponse(\"Approved\");\n              /**\n               * This string is arbitrary. It can be any serializable input that will be forwarded to your Crew as feedback.\n               */\n              respond?.(\"Approve\");\n            }}\n          >\n            Approve\n          </button>\n          <button\n            style={{\n              backgroundColor: \"#222222\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              color: \"white\",\n              cursor: \"pointer\",\n              borderRadius: \"4px\",\n            }}\n            onClick={() => {\n              setUserResponse(\"Rejected\");\n              /**\n               * This string is arbitrary. It can be any serializable input that will be forwarded to your Crew as feedback.\n               */\n              respond?.(\"Reject\");\n            }}\n          >\n            Reject\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\n/**\n * useCrewQuickstart\n * Minimal example that:\n * 1) Sets up a crew/agent\n * 2) Handles text-based user input (get_input)\n * 3) Renders real-time crew state\n * 4) Handles \"crew_requesting_feedback\"\n */\nexport const useCrewQuickstart = ({\n  crewName,\n  inputs,\n}: {\n  crewName: string;\n  inputs: Array<string>;\n}): {\n  output: string;\n} => {\n  const [initialMessageSent, setInitialMessageSent] = useState(false);\n\n  const { state, setState, run } = useCoAgent<\n    CrewsAgentState & {\n      result: string;\n      inputs: Record<string, string>;\n    }\n  >({\n    name: crewName,\n    initialState: {\n      inputs: {},\n      result: \"Crew result will appear here...\",\n    },\n  });\n\n  const { appendMessage, isLoading } = useCopilotChat();\n\n  const instructions =\n    \"INPUTS ARE ABSOLUTELY REQUIRED. Please call getInputs before proceeding with anything else.\";\n\n  // Render an initial message when the chat is first loaded\n  useEffect(() => {\n    if (initialMessageSent || isLoading) return;\n\n    setTimeout(async () => {\n      await appendMessage(\n        new TextMessage({\n          content: \"Hi, Please provide your inputs before we get started.\",\n          role: MessageRole.Developer,\n        })\n      );\n      setInitialMessageSent(true);\n    }, 0);\n  }, []);\n\n  useEffect(() => {\n    if (!initialMessageSent && Object.values(state?.inputs || {}).length > 0) {\n      appendMessage(\n        new TextMessage({\n          role: MessageRole.Developer,\n          content: \"My inputs are: \" + JSON.stringify(state?.inputs),\n        })\n      ).then(() => {\n        setInitialMessageSent(true);\n      });\n    }\n  }, [initialMessageSent, state?.inputs]);\n\n  useCopilotAdditionalInstructions({\n    instructions,\n    available:\n      Object.values(state?.inputs || {}).length > 0 ? \"enabled\" : \"disabled\",\n  });\n\n  useCopilotAction({\n    name: \"getInputs\",\n    followUp: false,\n    description:\n      \"This action allows Crew to get required inputs from the user before starting the Crew.\",\n    renderAndWaitForResponse({ status }) {\n      if (status === \"inProgress\" || status === \"executing\") {\n        return (\n          <form\n            style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}\n            onSubmit={async (e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n              const form = e.currentTarget;\n              const input = form.elements.namedItem(\n                \"input\"\n              ) as HTMLTextAreaElement;\n              const inputValue = input.value;\n              const inputKey = input.id;\n\n              setState({\n                ...state,\n                inputs: {\n                  ...state.inputs,\n                  [inputKey]: inputValue,\n                },\n              });\n              setTimeout(async () => {\n                console.log(\"running crew\");\n                await run();\n                console.log(\"crew run complete\");\n              }, 0);\n            }}\n          >\n            <div\n              style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}\n            >\n              {inputs.map((input) => (\n                <div\n                  key={input}\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    gap: \"8px\",\n                  }}\n                >\n                  <label htmlFor={input}>{input}</label>\n                  <textarea\n                    id={input}\n                    autoFocus\n                    name=\"input\"\n                    placeholder={`Enter ${input} here`}\n                    required\n                  />\n                </div>\n              ))}\n              <button\n                type=\"submit\"\n                style={{\n                  cursor: \"pointer\",\n                }}\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        );\n      }\n      return <>Inputs submitted</>;\n    },\n  });\n\n  useCoAgentStateRender({\n    name: crewName,\n    render: ({ state, status }) => (\n      <CrewStateRenderer state={state} status={status} />\n    ),\n  });\n\n  useCopilotAction({\n    name: \"crew_requesting_feedback\",\n    description: \"Request feedback from the user\",\n    renderAndWaitForResponse(props) {\n      const { status, args, respond } = props;\n      return (\n        <CrewHumanFeedbackRenderer\n          feedback={args as unknown as CrewsFeedback}\n          respond={respond}\n          status={status as CrewsResponseStatus}\n        />\n      );\n    },\n  });\n\n  return {\n    output: state?.result || \"\",\n  };\n};\n",
      "type": "registry:hook",
      "target": "hooks/crew-quickstart/use-crew-quickstart.tsx"
    },
    {
      "path": "components/crew-quickstart/index.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport useCrewQuickstart from \"./use-crew-quickstart\";\nimport { useCoAgent } from \"@copilotkit/react-core\";\nimport { useEffect } from \"react\";\n\nexport default function YourApp() {\n  const { output } = useCrewQuickstart({\n    crewName: \"<REPLACE_WITH_YOUR_CREW_NAME>\",\n    /**\n     * List of input required to start your crew (location e.g)\n     */\n    inputs: [\"location\"],\n  });\n  return (\n    <>\n      {/* Existing markup */}\n      {output ? (\n        <pre\n          style={{\n            width: \"500px\",\n            height: \"500px\",\n            whiteSpace: \"pre-wrap\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          {output}\n        </pre>\n      ) : null}\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/crew-quickstart/index.tsx"
    }
  ]
}